[{"data":1,"prerenderedAt":383},["Reactive",2],{"search-api":3},[4,12,18,27,33,39,46,55,63,70,77,87,94,108,120,127,140,149,209,221,244,255,263,270,282,289,296,303,310,340,351,361,377],{"id":5,"path":6,"dir":7,"title":8,"description":9,"keywords":10,"body":11},"content:0.index.md","/","","Documentation","Telegraph is a Laravel package that enables easy Telegram Bots interaction",[],"   \n       \n       \n       \n       \n       \n       Telegraph is a Laravel package for fluently interacting with Telegram Bots made by     Telegraph  ::  message  (  'hello world'  )\n       ->  keyboard  (  Keyboard  ::  make  ()  ->  buttons  ([\n               Button  ::  make  (  'Delete'  )  ->  action  (  'delete'  )  ->  param  (  'id'  ,   '42'  ),\n               Button  ::  make  (  'open'  )  ->  url  (  'https://test.it'  ),\n       ]))  ->  send  ();\n  Get the full source code at   https://github.com/defstudio/telegraph  This package is powered by   def:studio , follow us on   Twitter  html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":13,"path":14,"dir":7,"title":15,"description":7,"keywords":16,"body":17},"content:1.about-us.md","/about-us","About def:studio",[],"   def:studio  is a web and software agency located in Bari, Apulia, south of Italy. Follow us on   Twitter  This package was made and is actively maintained by   Daniele Romeo  and   Fabio Ivona , along with of our staff and   many other contributors .",{"id":19,"path":20,"dir":7,"title":21,"description":7,"keywords":22,"body":26},"content:2.installation.md","/installation","Installation & Configuration",[23,24,25],"Set up","Configuration","New bot creation","  You can install the package via composer:     composer   require   defstudio/telegraph\n  Set up  In order to work, Telegraph needs you to run its migrations:     php   artisan   vendor:publish   --tag=  \"telegraph-migrations\"\n     php   artisan   migrate\n  Configuration  You can publish the config file with:     php   artisan   vendor:publish   --tag=  \"telegraph-config\"\n  here's an example of what you'll find:     return   [\n       /*\n        * Telegram api base url, it can be overridden\n        * for self-hosted servers\n        */\n       'telegram_api_url'   =>   'https://api.telegram.org/'  ,\n   \n       /*\n        * Sets Telegraph messages default parse mode\n        * allowed values: html|markdown|MarkdownV2\n        */\n       'default_parse_mode'   =>   Telegraph  ::  PARSE_HTML  ,\n   \n       /*\n        * Sets the handler to be used when Telegraph\n        * receives a new webhook call.\n        *\n        * For reference, see https://defstudio.github.io/telegraph/webhooks/overview\n        */\n       'webhook_handler'   =>   DefStudio\\Telegraph\\Handlers\\EmptyWebhookHandler  ::class  ,\n   \n       /*\n        * Sets a custom domain when registering a webhook. This will allow a loca telegram bot api server\n        * to reach the webhook. Disabled by default\n        *\n        * For reference, see https://core.telegram.org/bots/api#using-a-local-bot-api-server\n        */\n       // 'custom_webhook_domain' => 'http://my.custom.domain';\n   \n       /*\n        * If enabled, Telegraph dumps received\n        * webhook messages to logs\n        */\n       'debug_mode'   =>   false  ,\n   \n       /*\n        * If enabled, unknown webhook commands are\n        * reported as exception in application logs\n        */\n       'report_unknown_webhook_commands'   =>   true  ,\n   \n       'security'   =>   [\n           /*\n            * if enabled, allows callback queries from unregistered chats\n            */\n           'allow_callback_queries_from_unknown_chats'   =>   false  ,\n   \n           /*\n            * if enabled, allows messages and commands from unregistered chats\n            */\n           'allow_messages_from_unknown_chats'   =>   false  ,\n   \n           /*\n            * if enabled, store unknown chats as new TelegraphChat models\n            */\n           'store_unknown_chats_in_db'   =>   false  ,\n       ],\n   \n       /*\n        * Set model class for both TelegraphBot and TelegraphChat,\n        * to allow more customization.\n        *\n        * Bot model must be or extend `DefStudio\\Telegraph\\Models\\TelegraphBot::class`\n        * Chat model must be or extend `DefStudio\\Telegraph\\Models\\TelegraphChat::class`\n        */\n       'models'   =>   [\n           'bot'   =>   DefStudio\\Telegraph\\Models\\TelegraphBot  ::class  ,\n           'chat'   =>   DefStudio\\Telegraph\\Models\\TelegraphChat  ::class  ,\n       ],\n   \n       'storage'   =>   [\n           /**\n            * Default storage driver to be used for Telegraph data\n            */\n           'default'   =>   'file'  ,\n   \n           'stores'   =>   [\n               'file'   =>   [\n                   /**\n                    * Telegraph cache driver to be used, must implement\n                    * DefStudio\\Telegraph\\Contracts\\StorageDriver contract\n                    */\n                   'driver'   =>   \\DefStudio\\Telegraph\\Storage\\FileStorageDriver  ::class  ,\n   \n                   /*\n                    * Laravel Storage disk to use. See /config/filesystems/disks for available disks\n                    * If 'null', Laravel default store will be used,\n                    */\n                   'disk'   =>   'local'  ,\n   \n                   /**\n                    * Folder inside filesystem to be used as root for Telegraph storage\n                    */\n                   'root'   =>   'telegraph'  ,\n               ],\n               'cache'   =>   [\n                   /**\n                    * Telegraph cache driver to be used, must implement\n                    * DefStudio\\Telegraph\\Contracts\\StorageDriver contract\n                    */\n                   'driver'   =>   \\DefStudio\\Telegraph\\Storage\\CacheStorageDriver  ::class  ,\n   \n                   /*\n                    * Laravel Cache store to use. See /config/cache/stores for available stores\n                    * If 'null', Laravel default store will be used,\n                    */\n                   'store'   =>   null  ,\n   \n                   /*\n                    * Prefix to be prepended to cache keys\n                    */\n                   'key_prefix'   =>   'tgph'  ,\n               ],\n           ],\n       ],\n   ];\n  New bot creation  In order to interact with Telegram, a new bot should be created and associated with a Telegram bot. Follow the    quickstart guide  for an overview of this.  html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":28,"path":29,"dir":7,"title":30,"description":7,"keywords":31,"body":32},"content:3.issues.md","/issues","Questions and Issues",[],"  Any issue with our package? A bug comes up? Do you have any question or want to suggest an improvement? feel free to   create a new issue  and we will take the best efforts to help you  If you have found any issue regarding security, please send an email   report@defstudio.it  instead of using the issue tracker and we will quickly work on it.",{"id":34,"path":35,"dir":7,"title":36,"description":7,"keywords":37,"body":38},"content:4.support-us.md","/support-us","Support Us",[],"  We at   def:studio  strongly believe that open source is the foundation of all our business and we try to contribute to it by helping other projects to grow along with developing and maintaining our packages. You can support our work by sponsoring us on   github !",{"id":40,"path":41,"dir":42,"title":43,"description":7,"keywords":44,"body":45},"content:11.quickstart:1.new-bot.md","/quickstart/new-bot","quickstart","Creating a new Telegram bot",[25],"  New bot creation  Go to the   @BotFather  app on Telegram.  Send   /newbot , to start creating a new Bot and setting its name and username.   Take note of the bot   token .   Join groups permission  To allow the bot to join Telegram groups, use the   /setjoingroups  command in @BotFather:   Privacy  Now you need to choose how much the bot will be able to read from the chats. Send   /setprivacy  command to @BotFather, and select your bot privacy:    enable : to handle only   /  commands handling   disable : to allow the bot to read all messages sent to the chat ",{"id":47,"path":48,"dir":42,"title":49,"description":50,"keywords":51,"body":54},"content:11.quickstart:2.register-new-bot.md","/quickstart/register-new-bot","Registering a bot with Telegraph","Any number of bots can be created, both programmatically and through an artisan command",[52,53],"through artisan command","programmatically","  Any number of bots can be created, both programmatically and through an artisan command  through artisan command  You can add a new bot issuing the dedicated   artisan  command:     php   artisan   telegraph:new-bot\n  you will be guided through a bot creation wizard that will (optionally) allow you to add a new chat and setup a bot webhook as well   programmatically  If you are implementing a custom bot creation logic, you can create a new bot using the   TelegraphBot  model:     $bot   =   TelegraphBot  ::  create  ([\n       'token'   =>   $token,\n       'name'   =>   $name,\n   ]);\n  html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":56,"path":57,"dir":42,"title":58,"description":59,"keywords":60,"body":62},"content:11.quickstart:3.setting-webhook.md","/quickstart/setting-webhook","Setting a webhook for the bot","A webhook lets your bot to answer commands issued from telegram chats and buttons inside messages",[61,53],"through an artisan command","  A webhook lets your bot to answer commands issued from telegram chats and buttons inside messages  through an artisan command     php   artisan   telegraph:set-webhook   {bot_id}\n  the   bot_id  argument is mandatory if you have created more than one bot  programmatically  A webhook can be created programmatically for a bot by calling its   registerWebhook()  method     /**   @var   TelegraphBot   $bot */\n   $bot  ->  registerWebhook  ()  ->  send  ();\n  html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":64,"path":65,"dir":42,"title":66,"description":67,"keywords":68,"body":69},"content:11.quickstart:4.register-new-chat.md","/quickstart/register-new-chat","Adding a chat to a Telegraph Bot","Associating one or more chats to a bot, it is enabled to send messages to that chat and interacting with commands",[61,53],"  Associating one or more chats to a bot, it is enabled to send messages to that chat and interacting with commands  \nTo get the \n  chat_id \n issue the \n  /chatid \n command inside the chat after having \n  set up a webhook \n for your bot.\n  through an artisan command     php   artisan   telegraph:new-chat   {bot_id}\n  the bot_id argument is mandatory if you have created more than one bot  programmatically  If you are implementing a custom bot creation logic, you can create a new chat using the   TelegraphChat  model:     /**   @var   TelegraphChat   $chat */\n   $chat   =   $telegraph_bot  ->  chats  ()  ->  create  ([\n       'chat_id'   =>   $chat_id,\n       'name'   =>   $chat_name,\n   ]);\n  html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":71,"path":72,"dir":42,"title":73,"description":74,"keywords":75,"body":76},"content:11.quickstart:5.sending-a-message.md","/quickstart/sending-a-message","Sending a message","After a bot and at least one chat have been set up, this package can be used to post new messages:",[],"  After a bot and at least one chat have been set up, this package can be used to post new messages:     use   DefStudio\\Telegraph\\Models\\TelegraphChat  ;\n   \n   /**   @var   TelegraphChat   $chat */\n   \n   $chat  ->  html  (  \"\u003Cstrong>Hello!\u003C/strong>  \\n\\n  I'm here!\"  )  ->  send  ();\n   as an alternative, messages can be formatted with markdown:     $chat  ->  markdown  (  \"*Hello!*  \\n\\n  I'm here!\"  )  ->  send  ();\n  or markdownV2:     $chat  ->  markdownV2  (  \"*Hello!*  \\n\\n  I'm here!\"  )  ->  send  ();\n  html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":78,"path":79,"dir":80,"title":81,"description":82,"keywords":83,"body":86},"content:12.features:1.messages.md","/features/messages","features","Messages","Messages can be sent to a Telegram chat using a TelegraphChat model",[84,85],"Options","Delete a message","  Messages can be sent to a Telegram chat using a   TelegraphChat  model     use   DefStudio\\Telegraph\\Models\\TelegraphChat  ;\n   \n   $chat   =   TelegraphChat  ::  find  (  44  );\n   \n   // this will use the default parsing method set in config/telegraph.php\n   $chat  ->  message  (  'hello'  )  ->  send  ();\n   \n   $chat  ->  html  (  \"\u003Cb>hello\u003C/b>  \\n\\n  I'm a bot!\"  )  ->  send  ();\n   \n   $chat  ->  markdown  (  '*hello*'  )  ->  send  ();\n  Options  Telegraph allows sending complex messages by setting some options:  edit  Updates an existing message instead of sending a new one     $chat  ->  edit  (  123456  )  ->  message  (  \"new text\"  )  ->  send  ();\n  reply  The message can be sent as a reply by setting the original message ID     $chat  ->  message  (  \"ok!\"  )  ->  reply  (  123456  )  ->  send  ();\n  forceReply  Forces the user to reply to the message. For more information see   the official api documentation     $chat  ->  message  (  \"ok!\"  )  ->  forceReply  (  placeholder  :   'Enter your reply...'  )  ->  send  ();\n  forwardMessage  Use this method to forward messages of any kind.     $chat  ->  forwardMessage  ($fromChat,$messageId)  ->  send  ();\n  copyMessage  Use this method to copy messages of any kind.\nThe method is analogous to the method forwardMessage, but the copied message doesn't have a link to the original message.     $chat  ->  copyMessage  ($fromChat,$messageId)  ->  send  ();\n  protected  Protects message contents from forwarding and saving     $chat  ->  message  (  \"please don't share this\"  )  ->  protected  ()  ->  send  ();\n  silent  Sends the message   silently . Users will receive a notification with no sound.     $chat  ->  message  (  \"late night message\"  )  ->  silent  ()  ->  send  ();\n  withoutPreview  Disables link previews for links in this message     $chat  ->  message  (  \"http://my-blog.dev\"  )  ->  withoutPreview  ()  ->  send  ();\n  Delete a message  The    ->deleteMessage()  Telegraph method allows to remove a message from a chat/group/channel  \nA message can be deleted if it was sent less than 48h ago and if it \n  was sent \n by the bot or if the bot \n  has permission \n to delete other users' messages\n  html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":88,"path":89,"dir":80,"title":90,"description":91,"keywords":92,"body":93},"content:12.features:2.telegraph-facade.md","/features/telegraph-facade","Telegraph Facade","In applications that have a single bot writing on a single chat, both will be automatically inferred:",[],"  In applications that have a single bot writing on a single chat, both will be automatically inferred:     Telegraph  ::  message  (  'hello world'  )  ->  send  ();\n  this will allow a fluent tool for interacting with Telegram:     Telegraph  ::  message  (  'hello world'  )\n       ->  keyboard  (  Keyboard  ::  make  ()  ->  buttons  ([\n           Button  ::  make  (  \"🗑️ Delete\"  )  ->  action  (  \"delete\"  )  ->  param  (  'id'  , $notification  ->  id),  \n           Button  ::  make  (  \"📖 Mark as Read\"  )  ->  action  (  \"read\"  )  ->  param  (  'id'  , $notification  ->  id),  \n           Button  ::  make  (  \"👀 Open\"  )  ->  url  (  'https://test.it'  ),  \n       ])  ->  chunk  (  2  ))  ->  send  ();\n  \nTelegraph supports also sending emojis in messages and \n  keyboard \n button labels 🚀🚀🚀\n  html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":95,"path":96,"dir":80,"title":97,"description":98,"keywords":99,"body":107},"content:12.features:3.keyboards.md","/features/keyboards","Message Keyboards","A keyboard can be added to a message in order to offer a set of options to the user:",[100,101,102,103,104,105,106],"Attaching a keyboard","Buttons","Keyboard Rows","Updating a keyboard","Deleting a keyboard","Conditional methods","Right to left layout","  A keyboard can be added to a message in order to offer a set of options to the user:   Attaching a keyboard  A keyboard can be added to a message using the   ->keyboard()  command, passing a new   Keyboard  object as argument.   Keyboard  has a fluent way to define its buttons and other properties (rows, button chunking, etc.):  buttons can be set up using the   Keyboard::make()->buttons()  method and are defined as a   Button  array     use   DefStudio\\Telegraph\\Keyboard\\Button  ;\n   use   DefStudio\\Telegraph\\Keyboard\\Keyboard  ;\n   \n   Telegraph  ::  message  (  'hello world'  )\n   ->  keyboard  (  Keyboard  ::  make  ()  ->  buttons  ([\n           Button  ::  make  (  'Delete'  )  ->  action  (  'delete'  )  ->  param  (  'id'  ,   '42'  ),\n           Button  ::  make  (  'open'  )  ->  url  (  'https://test.it'  ),\n           Button  ::  make  (  'Web App'  )  ->  webApp  (  'https://web-app.test.it'  ),\n           Button  ::  make  (  'Login Url'  )  ->  loginUrl  (  'https://loginUrl.test.it'  ),\n   ]))  ->  send  ();\n  Additionally, a keyboard can be added to a message using a closure:     use   DefStudio\\Telegraph\\Keyboard\\Button  ;\n   use   DefStudio\\Telegraph\\Keyboard\\Keyboard  ;\n   \n   Telegraph  ::  message  (  'hello world'  )\n   ->  keyboard  (  function  (  Keyboard   $keyboard){\n       return   $keyboard\n           ->  button  (  'Delete'  )  ->  action  (  'delete'  )  ->  param  (  'id'  ,   '42'  )\n           ->  button  (  'open'  )  ->  url  (  'https://test.it'  )\n           ->  button  (  'Web App'  )  ->  webApp  (  'https://web-app.test.it'  )\n           ->  button  (  'Login Url'  )  ->  loginUrl  (  'https://loginUrl.test.it'  );\n   })  ->  send  ();\n  Buttons  Each   Button  can be defined using its fluent methods and can be of three types:  Callback Buttons  Define an   action  and some   params . They triggers a   callback query  to be handled by a custom webhook     Button  ::  make  (  'Delete'  )  ->  action  (  'delete'  )  ->  param  (  'id'  ,   '42'  ),\n  URL Buttons  Define an   url  and are used to open an external url when pressed:     Button  ::  make  (  'open'  )  ->  url  (  'https://test.it'  ),\n  Web App Buttons  Declare the web app   url  and are used to start a telegram bot   Web App  :     Button  ::  make  (  'open'  )  ->  webApp  (  'https://webapp.url.dev'  ),\n  Login Url Buttons  Declare the login   url  and are used to start a telegram widget   Login Url  :     Button  ::  make  (  'open'  )  ->  loginUrl  (  'https://login.url.dev'  ),\n  Switch Inline Query Buttons  Pressing the button will prompt the user to select one of their chats,\nopen that chat and insert the bot's username and the specified inline query\nin the input field. The query text may be empty, in which case just the\nbot's username will be inserted. (see   switch_inline_query  in   Telegram Bot docs  for reference)     Button  ::  make  (  'switch'  )  ->  switchInlineQuery  (  'foo'  ),\n  Additionally, an inline query button may act for the current chat\n(so, would skip the destination chat prompt) only if   ->currentChat()  method is added\n(see   switch_inline_query_current_chat  in   Telegram Bot docs  for reference)     Button  ::  make  (  'switch'  )  ->  switchInlineQuery  (  'foo'  )  ->  currentChat  (),\n  Keyboard Rows  A keyboard will normally place one button per row, this behaviour can be customized by defining rows, by setting individual buttons width or by chunking buttons  by rows     use   DefStudio\\Telegraph\\Keyboard\\Button  ;\n   use   DefStudio\\Telegraph\\Keyboard\\Keyboard  ;\n   \n   $keyboard   =   Keyboard  ::  make  ()\n       ->  row  ([\n           Button  ::  make  (  'Delete'  )  ->  action  (  'delete'  )  ->  param  (  'id'  ,   '42'  ),\n           Button  ::  make  (  'Dismiss'  )  ->  action  (  'dismiss'  )  ->  param  (  'id'  ,   '42'  ),\n       ])\n       ->  row  ([\n           Button  ::  make  (  'open'  )  ->  url  (  'https://test.it'  ),\n       ]);\n  by setting buttons width  A button relative width can be set using a float number the total width percentage to be taken. Buttons will flow through the rows according to their width  this example would define two buttons on the first row and a large button on the second one:     use   DefStudio\\Telegraph\\Keyboard\\Button  ;\n   use   DefStudio\\Telegraph\\Keyboard\\Keyboard  ;\n   \n   $keyboard   =   Keyboard  ::  make  ()\n       ->  button  (  'Delete'  )  ->  action  (  'delete'  )  ->  param  (  'id'  ,   '42'  )  ->  width  (  0.5  )\n       ->  button  (  'Dismiss'  )  ->  action  (  'dismiss'  )  ->  param  (  'id'  ,   '42'  )  ->  width  (  0.5  )\n       ->  button  (  'open'  )  ->  url  (  'https://test.it'  );\n       ->  button  (  'open'  )  ->  webApp  (  'https://web-app.url.dev'  );\n       ->  button  (  'open'  )  ->  loginUrl  (  'https://login.url.dev'  );\n   notes   A button default width is 1 (that's to say, the entire row width)  Each width is defined as a float between 0 and 1 that represents the floating point percentage of the row taken by the button.  each button will fill the current row or flow in the subsequent one if there isn't enough space left  by chunking  Buttons can be authomatically chunked in rows using the   ->chunk()  method.  This example would return a first row of two buttons, a second row of two buttons and the last row with the remaining button.     use   DefStudio\\Telegraph\\Keyboard\\Button  ;\n   use   DefStudio\\Telegraph\\Keyboard\\Keyboard  ;\n   \n   $keyboard   =   Keyboard  ::  make  ()\n       ->  button  (  'Delete'  )  ->  action  (  'delete'  )  ->  param  (  'id'  ,   '42'  )\n       ->  button  (  'Dismiss'  )  ->  action  (  'dismiss'  )  ->  param  (  'id'  ,   '42'  )\n       ->  button  (  'Share'  )  ->  action  (  'share'  )  ->  param  (  'id'  ,   '42'  )\n       ->  button  (  'Solve'  )  ->  action  (  'solve'  )  ->  param  (  'id'  ,   '42'  )\n       ->  button  (  'Open'  )  ->  url  (  'https://test.it'  )\n       ->  chunk  (  2  );\n  Updating a keyboard  A message keyboard can be replaced by a new one by submitting its   messageId :     Telegraph  ::  replaceKeyboard  (\n       messageId  :   1568794  , \n       newKeyboard  :   Keyboard  ::  make  ()  ->  buttons  ([\n           Button  ::  make  (  'Delete'  )  ->  action  (  'delete'  )  ->  param  (  'id'  ,   '42'  ),\n           Button  ::  make  (  'open'  )  ->  url  (  'https://test.it'  ),\n       ])\n   )  ->  send  ();\n  Deleting a keyboard  A keyboard can be removed from a message by submitting its   messageId :     Telegraph  ::  deleteKeyboard  (  messageId  :   1568794  )  ->  send  ();\n  Conditional methods  a   when  method allows to execute a closure when the given condition is verified     Keyboard  ::  make  ()\n       ->  button  (  'Dismiss'  )  ->  action  (  'dismiss'  )  ->  param  (  'id'  ,   '42'  )  ->  width  (  0.5  )\n       ->  when  ($userCanDelete,   fn  (  Keyboard   $keyboard) => $keyboard  ->  button  (  'Delete'  )  ->  action  (  'delete'  )  ->  param  (  'id'  ,   '42'  )  ->  width  (  0.5  ))\n  Right to left layout  A   rightToLeft  method allows to change buttons layout from left-to-right to right-to-left (RTL).     use   DefStudio\\Telegraph\\Keyboard\\Button  ;\n   use   DefStudio\\Telegraph\\Keyboard\\Keyboard  ;\n   \n   $keyboard   =   Keyboard  ::  make  ()\n       ->  row  ([\n           Button  ::  make  (  'Delete'  )  ->  action  (  'delete'  )  ->  param  (  'id'  ,   '42'  ),\n           Button  ::  make  (  'Dismiss'  )  ->  action  (  'dismiss'  )  ->  param  (  'id'  ,   '42'  ),\n       ])\n       ->  row  ([\n           Button  ::  make  (  'open'  )  ->  url  (  'https://test.it'  ),\n       ])\n       ->  rightToLeft  ();\n  html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":109,"path":110,"dir":80,"title":111,"description":112,"keywords":113,"body":119},"content:12.features:4.reply-keyboards.md","/features/reply-keyboards","Reply Keyboards","When sending a message, Telegram can be instructed to replace the standard phone keyboard with a custom one (see here for detailed info):",[100,102,114,115,116,117,118,105],"Resize a keyboard","One time keyboards","Adding a placeholder for the input field","Applying a keyboard to a specific user","Removing a keyboard","  When sending a message, Telegram can be instructed to replace the standard phone keyboard with a custom one (see   here  for detailed info):   Attaching a keyboard  A keyboard can be added to a message using the   ->replyKeyboard()  command, passing a new   ReplyKeyboard  object as argument.   ReplyKeyboard  has a fluent way to define its buttons and other properties (rows, button chunking, etc.):  buttons can be set up using the   ReplyKeyboard::make()->buttons()  method and are defined as a   ReplyButton  array     use   DefStudio\\Telegraph\\Keyboard\\Button  ;\n   use   DefStudio\\Telegraph\\Keyboard\\Keyboard  ;\n   \n   Telegraph  ::  message  (  'hello world'  )\n       ->  replyKeyboard  (  ReplyKeyboard  ::  make  ()  ->  buttons  ([\n          ReplyButton  ::  make  (  'foo'  )  ->  requestPoll  (),\n          ReplyButton  ::  make  (  'bar'  )  ->  requestQuiz  (),\n          ReplyButton  ::  make  (  'baz'  )  ->  webApp  (  'https://webapp.dev'  ),\n       ]))  ->  send  ();\n  Additionally, a keyboard can be added to a message using a closure:     use   DefStudio\\Telegraph\\Keyboard\\Button  ;\n   use   DefStudio\\Telegraph\\Keyboard\\Keyboard  ;\n   \n   Telegraph  ::  message  (  'hello world'  )\n   ->  replyKeyboard  (  function  (  Keyboard   $keyboard){\n       return   $keyboard\n           ->  button  (  'foo'  )  ->  requestPoll  ()\n           ->  button  (  'bar'  )  ->  requestQuiz  ()\n           ->  button  (  'baz'  )  ->  webApp  (  'https://webapp.dev'  );\n   })  ->  send  ();\n  Keyboard Rows  A keyboard will normally place one button per row, this behaviour can be customized by defining rows, by setting individual buttons width or by chunking buttons  by rows     use   DefStudio\\Telegraph\\Keyboard\\ReplyButton  ;\n   use   DefStudio\\Telegraph\\Keyboard\\ReplyKeyboard  ;\n   \n   $keyboard   =   ReplyKeyboard  ::  make  ()\n       ->  row  ([\n           ReplyButton  ::  make  (  'Send Contact'  )  ->  requestContact  (),\n           ReplyButton  ::  make  (  'Send Location'  )  ->  requestLocation  (),\n       ])\n       ->  row  ([\n           ReplyButton  ::  make  (  'Quiz'  )  ->  requestQuiz  (),\n       ]);\n  by setting buttons width  A button relative width can be set using a float number the total width percentage to be taken. Buttons will flow through the rows according to their width  this example would define two buttons on the first row and a large button on the second one:     use   DefStudio\\Telegraph\\Keyboard\\ReplyButton  ;\n   use   DefStudio\\Telegraph\\Keyboard\\ReplyKeyboard  ;\n   \n   $keyboard   =   ReplyKeyboard  ::  make  ()\n       ->  button  (  'Text'  )\n       ->  button  (  'Send Contact'  )  ->  requestContact  ()\n       ->  button  (  'Send Location'  )  ->  requestLocation  ()\n       ->  button  (  'Create Quiz'  )  ->  requestQuiz  ()\n       ->  button  (  'Create Poll'  )  ->  requestPoll  ()\n       ->  button  (  'Start WebApp'  )  ->  webApp  (  'https://web.app.dev'  );\n   notes   A button default width is 1 (that's to say, the entire row width)  Each width is defined as a float between 0 and 1 that represents the floating point percentage of the row taken by the button.  each button will fill the current row or flow in the subsequent one if there isn't enough space left  by chunking  Buttons can be authomatically chunked in rows using the   ->chunk()  method.  This example would return a first row of two buttons, a second row of two buttons and the last row with the remaining button.     use   DefStudio\\Telegraph\\Keyboard\\ReplyButton  ;\n   use   DefStudio\\Telegraph\\Keyboard\\ReplyKeyboard  ;\n   \n   $keyboard   =   ReplyKeyboard  ::  make  ()\n      ->  button  (  'Text'  )\n       ->  button  (  'Send Contact'  )  ->  requestContact  ()\n       ->  button  (  'Send Location'  )  ->  requestLocation  ()\n       ->  button  (  'Create Quiz'  )  ->  requestQuiz  ()\n       ->  button  (  'Create Poll'  )  ->  requestPoll  ()\n       ->  button  (  'Start WebApp'  )  ->  webApp  (  'https://web.app.dev'  )\n       ->  chunk  (  2  );\n  Resize a keyboard  Clients can be requested to resize the keyboard vertically for optimal fit (e.g., make the keyboard smaller if there are just two rows of buttons). Defaults to false, in which case the custom keyboard is always of the same height as the app's standard keyboard.     use   DefStudio\\Telegraph\\Keyboard\\ReplyButton  ;\n   use   DefStudio\\Telegraph\\Keyboard\\ReplyKeyboard  ;\n   \n   $keyboard   =   ReplyKeyboard  ::  make  ()\n       ->  button  (  'Send Contact'  )  ->  requestContact  ()\n       ->  button  (  'Send Location'  )  ->  requestLocation  ()\n       ->  resize  ();\n  One time keyboards  Requests clients to hide the keyboard as soon as it's been used. The keyboard will still be available, but clients will automatically display the usual letter-keyboard in the chat – the user can press a special button in the input field to see the custom keyboard again     use   DefStudio\\Telegraph\\Keyboard\\ReplyButton  ;\n   use   DefStudio\\Telegraph\\Keyboard\\ReplyKeyboard  ;\n   \n   $keyboard   =   ReplyKeyboard  ::  make  ()\n       ->  button  (  'Send Contact'  )  ->  requestContact  ()\n       ->  button  (  'Send Location'  )  ->  requestLocation  ()\n       ->  oneTime  ();\n  Adding a placeholder for the input field  The placeholder to be shown in the input field when the keyboard is active can be set with:     use   DefStudio\\Telegraph\\Keyboard\\ReplyButton  ;\n   use   DefStudio\\Telegraph\\Keyboard\\ReplyKeyboard  ;\n   \n   $keyboard   =   ReplyKeyboard  ::  make  ()\n       ->  button  (  'Send Contact'  )  ->  requestContact  ()\n       ->  button  (  'Send Location'  )  ->  requestLocation  ()\n       ->  inputPlaceholder  (  \"Waiting for input...\"  );\n  Applying a keyboard to a specific user  A keyboard can be applied to specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply (has reply_to_message_id), sender of the original message.  Example: A user requests to change the bot's language, bot replies to the request with a keyboard to select the new language. Other users in the group don't see the keyboard.     use   DefStudio\\Telegraph\\Keyboard\\ReplyButton  ;\n   use   DefStudio\\Telegraph\\Keyboard\\ReplyKeyboard  ;\n   \n   $keyboard   =   ReplyKeyboard  ::  make  ()\n       ->  button  (  'Send Contact'  )  ->  requestContact  ()\n       ->  button  (  'Send Location'  )  ->  requestLocation  ()\n       ->  selective  ();\n  Removing a keyboard  A reply keyboard can be removed from clients with this call:     Telegraph  ::  message  (  'command received'  )\n       ->  removeReplyKeyboard  ()\n       ->  send  ();\n  Removing a keyboard for a specific user  To remove the keyboard for a specific user, simply pass   true  parameter to the   removeReplyKeyboard  method.  Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply (has reply_to_message_id), sender of the original message.  Example: A user votes in a poll, bot returns confirmation message in reply to the vote and removes the keyboard for that user, while still showing the keyboard with poll options to users who haven't voted yet.     Telegraph  ::  message  (  'command received'  )\n       ->  removeReplyKeyboard  (  true  )\n       ->  send  ();\n  Conditional methods  a   when  method allows to execute a closure when the given condition is verified     ReplyKeyboard  ::  make  ()\n       ->  button  (  'Send Contact'  )  ->  requestContact  ()\n        ->  when  ($shouldRequestLocation,   fn  (  ReplyKeyboard   $keyboard) => $keyboard  ->  button  (  'Send Location'  )  ->  requestLocation  ())\n  html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":121,"path":122,"dir":80,"title":123,"description":124,"keywords":125,"body":126},"content:12.features:5.queued-messages.md","/features/queued-messages","Queued Messages","A ->dispatch() method can be used to have Telegraph to interact with telegraph through the Laravel queue system:",[],"  A   ->dispatch()  method can be used to have Telegraph to interact with telegraph through the Laravel queue system:     Telegraph  ::  message  (  'hello'  )  ->  dispatch  ();\n  optionally a queue name can be hinted:   ->dispatch('my queue')  html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":128,"path":129,"dir":80,"title":130,"description":131,"keywords":132,"body":139},"content:12.features:6.telegraph-response.md","/features/telegraph-response","TelegraphResponse","all Telegraph requests return a TelegraphResponse that extends the original Illuminate\\Http\\Client\\Response adding some useful methods:",[133,134,135,136,137,138],"All Illuminate\\Http\\Client\\Response methods","telegraphOk","telegraphError","telegraphMessageId","dump","dd","  all Telegraph requests return a   TelegraphResponse  that extends the original   Illuminate\\Http\\Client\\Response  adding some useful methods:  All   Illuminate\\Http\\Client\\Response  methods  As   TelegraphResponse  extends   Illuminate\\Http\\Client\\Response , it inherits all its methods:     $response   =   Telegraph  ::  message  (  'hello'  )  ->  send  ();\n   \n   $response  ->  successful  ();\n   $response  ->  ok  ();\n   $response  ->  failed  ();\n   $response  ->  body  ();\n   $response  ->  json  (  'path.to.json.data'  ,   'default'  );\n   \n   //.. and so on\n  telegraphOk  Returns true if the Telegram request is successful and contains   ['ok' => true]  in its body     $response   =   Telegraph  ::  message  (  'hello'  )  ->  send  ();\n   \n   $response  ->  telegraphOk  ();   //true\n  telegraphError  Returns true if the Telegram request is not successful or is successful but doesn't contain   ['ok' => true]  in its body     $response   =   Telegraph  ::  message  (  'hello'  )  ->  send  ();\n   \n   $response  ->  telegraphError  ();   //false\n  telegraphMessageId  Returns the ID of the message posted on the Telegraph chat (  null  if the request failed or no message was posted)     $response   =   Telegraph  ::  message  (  'hello'  )  ->  send  ();\n   \n   $response  ->  telegraphMessageId  ();   //4568\n  dump  print a   dump()  of the response for testing purposes     $response   =   Telegraph  ::  message  (  'hello'  )  ->  send  ();\n   \n   $response  ->  dump  ();\n  dd  print a   dd()  of the response for testing purposes     $response   =   Telegraph  ::  message  (  'hello'  )  ->  send  ();\n   \n   $response  ->  dd  ();\n  html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":141,"path":142,"dir":80,"title":143,"description":144,"keywords":145,"body":148},"content:12.features:7.attachments.md","/features/attachments","Attachments","Telegraph supports different types of attachments both from local files, remote urls and existing files on Telegram servers (using their file_id)",[146,147,84],"Optional parameters","Attachment types","  Telegraph supports different types of attachments both from local files, remote urls and existing files on Telegram servers (using their file_id)  Optional parameters  Attachments methods only supports required parameters, optional parameters can be sent through Telegraph   ->withData()  method:     Telegraph  ::  message  (  'hi'  )  ->  withData  (  'caption'  ,   'test'  )  ->  send  ();\n   Telegraph  ::  withData  (  'caption'  ,   'test'  )  ->  message  (  'hi'  )  ->  send  ();\n  Attachment types  Photos  Photos can be sent through Telegraph   ->photo()  method:     Telegraph  ::  photo  (  Storage  ::  path  (  'photo.jpg'  ))  ->  send  ();\n   Telegraph  ::  photo  (  'https://my-repository/photo.jpg'  )  ->  send  ();\n   Telegraph  ::  photo  ($telegramFileId)  ->  send  ();\n  \nSent Photos can be edited with the \n  editMedia \n call\n  Animations  Animations can be sent through Telegraph   ->animation()  method:     Telegraph  ::  animation  (  Storage  ::  path  (  'gif.gif'  ))  ->  send  ();\n   Telegraph  ::  animation  (  'https://my-repository/gif.gif'  )  ->  send  ();\n   Telegraph  ::  animation  ($telegramFileId)  ->  send  ();\n  \nSent Animations can be edited with the \n  editMedia \n call\n  Video  Videos can be sent through Telegraph   ->video()  method:     Telegraph  ::  video  (  Storage  ::  path  (  'video.mp4'  ))  ->  send  ();\n   Telegraph  ::  video  (  'https://my-repository/video.mp4'  )  ->  send  ();\n   Telegraph  ::  video  ($telegramFileId)  ->  send  ();\n  \nSent Videos can be edited with the \n  editMedia \n call\n  Audio  Audio (.MP3 or .M4A format) can be sent through Telegraph   ->audio()  method:     Telegraph  ::  audio  (  Storage  ::  path  (  'audio.mp3'  ))  ->  send  ();\n   Telegraph  ::  audio  (  'https://my-repository/audio.mp3'  )  ->  send  ();\n   Telegraph  ::  audio  ($telegramFileId)  ->  send  ();\n  \nSent Audio messages can be edited with the \n  editMedia \n call\n  Vocal Messages  Vocals can be sent through Telegraph   ->voice()  method:     Telegraph  ::  voice  (  Storage  ::  path  (  'voice.ogg'  ))  ->  send  ();\n   Telegraph  ::  voice  (  'https://my-repository/voice.ogg'  )  ->  send  ();\n   Telegraph  ::  voice  ($telegramFileId)  ->  send  ();\n  Documents  Documents can be sent through Telegraph   ->document()  method:     Telegraph  ::  document  (  Storage  ::  path  (  'my_document.pdf'  ))  ->  send  ();\n   Telegraph  ::  document  (  'https://my-repository/my_document.pdf'  )  ->  send  ();\n   Telegraph  ::  document  ($telegramFileId)  ->  send  ();\n  \nSent Documents can be edited with the \n  editMedia \n call\n  Location  A location attachment can be sent through Telegraph   ->location()  method:     Telegraph  ::  location  (  12.345  ,   -  54.321  )  ->  send  ();\n  Contact  A contact attachment can be sent through Telegraph   ->contact()  method:     Telegraph  ::  contact  (  '3331122111'  ,   'firstName'  )  ->  send  ();\n  Dice  An animated emoji attachment that will display a random value can be sent through Telegraph   ->dice()  method:     Telegraph  ::  dice  ()  ->  send  ();\n  Different items can be used as \"dice\"     Telegraph  ::  dice  (  \\DefStudio\\Telegraph\\Enums\\Emojis  ::  SLOT_MACHINE  )  ->  send  ();\n  Options  When sending files, some options are available:  Html caption     Telegraph  ::  document  (  Storage  ::  path  (  'my_document.pdf'  ))\n       ->  html  (  '\u003Cb>read this\u003C/b>'  )\n       ->  send  ();\n  \nSent attachment captions can be edited with the \n  editCaption \n call\n  Markdown caption     Telegraph  ::  document  (  Storage  ::  path  (  'my_document.pdf'  ))\n       ->  markdown  (  'read *this*'  )\n       ->  send  ();\n  \nSent attachment captions can be edited with the \n  editCaption \n call\n  MarkdownV2 caption     Telegraph  ::  document  (  Storage  ::  path  (  'my_document.pdf'  ))\n       ->  markdownV2  (  'read *this*'  )\n       ->  send  ();\n  \nSent attachment captions can be edited with the \n  editCaption \n call\n  Without notification     Telegraph  ::  document  (  Storage  ::  path  (  'my_document.pdf'  ))\n       ->  silent  ()\n       ->  send  ();\n  Prevent sharing     Telegraph  ::  document  (  Storage  ::  path  (  'my_document.pdf'  ))\n       ->  protected  ()\n       ->  send  ();\n  Reply to a message     Telegraph  ::  document  (  Storage  ::  path  (  'my_document.pdf'  ))\n       ->  reply  ($messageId)\n       ->  send  ();\n  Attach a keyboard     Telegraph  ::  document  (  Storage  ::  path  (  'brochure.pdf'  ))\n         ->  keyboard  (  fn   (  Keyboard   $keyboard) => $keyboard  ->  button  (  'visit'  )  ->  url  (  'https://defstudio.it'  ))\n       ->  send  ();\n  Add a thumbnail     Telegraph  ::  document  (  Storage  ::  path  (  'brochure.pdf'  ))\n       ->  thumbnail  (  Storage  ::  path  (  'brochure_thumbnail.jpg'  ))\n       ->  send  ();\n  html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":150,"path":151,"dir":80,"title":152,"description":7,"keywords":153,"body":208},"content:12.features:8.telegram-api-calls.md","/features/telegram-api-calls","Telegram API calls",[154,155,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,137,138,207],"answerInlineQuery","botInfo","botUpdates","chatAction","deleteMessage","forwardMessage","pinMessage","unpinMessage","unpinAllMessages","deleteKeyboard","document","edit","editCaption","editMedia","getWebhookDebugInfo","location","markdown","markdownV2","message","html","photo","registerBotCommands","getRegisteredCommands","registerWebhook","replaceKeyboard","replyWebhook","store","unregisterBotCommands","unregisterWebhook","voice","when","setBaseUrl","setTitle","setDescription","setChatPhoto","chatInfo","setChatMenuButton","chatMenuButton","chatMemberCount","chatMember","userProfilePhotos","generateChatPrimaryInviteLink","createChatInviteLink","editChatInviteLink","revokeChatInviteLink","setChatPermissions","banChatMember","unbanChatMember","restrictChatMember","promoteChatMember","demoteChatMember","poll","quiz","withData","  answerInlineQuery  send back the results for an inline query      Telegraph  ::  answerInlineQuery  ($inlineQuery  ->  id  (), [\n       InlineQueryResultPhoto  ::  make  ($logo  ->  id  .  \"-light\"  ,   \"https://logofinder.dev/  $logo  ->  id  /light.jpg\"  ,   \"https://logofinder.dev/  $logo  ->  id  /light/thumb.jpg\"  )\n           ->  caption  (  'Light Logo'  ),\n       InlineQueryResultPhoto  ::  make  ($logo  ->  id  .  \"-dark\"  ,   \"https://logofinder.dev/  $logo  ->  id  /dark.jpg\"  ,   \"https://logofinder.dev/  $logo  ->  id  /dark/thumb.jpg\"  )\n           ->  caption  (  'Dark Logo'  ),\n   ])  ->  cache  (  seconds  :   600  )  ->  send  ();\n  botInfo  retrieves Bot data from Telegram APIs     Telegraph  ::  botInfo  ()  ->  send  ();\n   \n   /*\n   id: xxxxx\n   is_bot: true\n   first_name: telegraph-test\n   username: my_test_bot\n   can_join_groups: true\n   can_read_all_group_messages: false\n   supports_inline_queries: false\n   */\n  botInfo  retrieves the bot data from Telegram APIs     Telegraph  ::  bot  ($telegraphBot)  ->  botInfo  ()  ->  send  ();\n  botUpdates  retrieves the bot updates from Telegram APIs     Telegraph  ::  bot  ($telegraphBot)  ->  botUpdates  ()  ->  send  ();\n  \nManual updates polling is not available if a webhook is set up for the bot. Webhook should be remove first using its \n  unregisterWebhook \n method\n  chatAction  Tells the chat users that something is happening on the bot's side. The status is set for up to 5 seconds or when a new message is received from the bot.      Telegraph  ::  chatAction  (  ChatActions  ::  TYPING  )  ->  send  ();\n  deleteMessage  deletes a message     Telegraph  ::  deleteMessage  ($messageId)  ->  send  ();\n  forwardMessage  forwards a message from another chat     Telegraph  ::  forwardMessage  ($fromChat, $messageId)  ->  send  ();\n  pinMessage  pins a message     Telegraph  ::  pinMessage  ($messageId)  ->  send  ();\n  unpinMessage  unpins a message     Telegraph  ::  unpinMessage  ($messageId)  ->  send  ();\n  unpinAllMessages  unpin al messages     Telegraph  ::  unpinAllMessages  ()  ->  send  ();\n  deleteKeyboard  removes a message keyboard (see   keyboards  for details)     Telegraph  ::  deleteKeyboard  ($messageId)  ->  send  ();\n  document  sends a document     Telegraph  ::  document  ($documentPath)  ->  send  ();\n  edit  edits a message     Telegraph  ::  edit  ($messageId)  ->  markdown  (  'new message'  )  ->  send  ();\n  editCaption  edits an attachment caption     Telegraph  ::  editCaption  ($messageId)  ->  markdownV2  (  'new caption'  )  ->  send  ();\n  editMedia  edits a media messages with a new media content     Telegraph  ::  editMedia  ($messageId)  ->  photo  ($path)  ->  send  ();\n   Telegraph  ::  editMedia  ($messageId)  ->  document  ($path)  ->  send  ();\n   Telegraph  ::  editMedia  ($messageId)  ->  animation  ($path)  ->  send  ();\n   Telegraph  ::  editMedia  ($messageId)  ->  video  ($path)  ->  send  ();\n   Telegraph  ::  editMedia  ($messageId)  ->  audio  ($path)  ->  send  ();\n  getWebhookDebugInfo  retrieves webhook debug data for the active bot     $response   =   Telegraph  ::  getWebhookDebugInfo  ()  ->  send  ();\n  location  sends a location attachment     Telegraph  ::  location  (  12.345  ,   -  54.321  )  ->  send  ();\n  Contact  sens a contact attachment     Telegraph  ::  contact  (  '3331122111'  ,   'firstName'  )  ->  send  ();\n  markdown  compose a new telegram message (parsed as markdown)     Telegraph  ::  markdown  (  '*hello* world'  )  ->  send  ();\n  markdownV2  compose a new telegram message (parsed as markdownV2)     Telegraph  ::  markdownV2  (  '*hello* world'  )  ->  send  ();\n  message  compose a new telegram message (will use the default parse mode set up in   config/telegraph.php )     Telegraph  ::  message  (  'hello'  )  ->  send  ();\n  html  compose a new telegram message (parsed as html)     Telegraph  ::  html  (  '\u003Cb>hello\u003C/b> world'  )  ->  send  ();\n  photo  sends a photo     Telegraph  ::  photo  ($pathToPhotoFile)  ->  send  ();\n  registerBotCommands  register commands in Telegram Bot in order to display them to the user when the \"/\" key is pressed     Telegraph  ::  registerBotCommands  ([\n       'command1'   =>   'command 1 description'  ,\n       'command2'   =>   'command 2 description'\n   ])  ->  send  ();\n  getRegisteredCommands  retrieve bot's registered commands.     $response   =   Telegraph  ::  getRegisteredCommands  ()  ->  send  ();\n   $response  ->  json  (  'result'  );\n  registerWebhook  register a webhook for the active bot     Telegraph  ::  registerWebhook  ()  ->  send  ();\n  replaceKeyboard  replace a message keyboard (see   keyboards  for details)     Telegraph  ::  replaceKeyboard  (\n       $messageId, \n       Keyboard  ::  make  ()  ->  buttons  ([\n           Button  ::  make  (  'open'  )  ->  url  (  'https://test.dev'  )\n       ])\n   )  ->  send  ();\n  replyWebhook  replies to a webhook callback     Telegraph  ::  replyWebhook  ($callbackQueryId,   'message received'  , $showAlert)  ->  send  ();\n  store  Downloads a media file and stores it in the given path     /**   @var   DefStudio\\Telegraph\\DTO\\Photo   $photo */\n   \n   Telegraph  ::  store  ($photo,   Storage  ::  path  (  'bot/images'  ),   'The Photo.jpg'  );\n  unregisterBotCommands  resets Telegram Bot registered commands     Telegraph  ::  unregisterBotCommands  ()  ->  send  ();\n  unregisterWebhook  unregister a webhook for the active bot     Telegraph  ::  registerWebhook  ()  ->  send  ();\n  voice  sends a vocal message     Telegraph  ::  voice  ($pathToVoiceFile)  ->  send  ();\n  when  allows to execute a closure when the given condition is verified     Telegraph  ::  when  (  true  ,   fn  (  Telegraph   $telegraph) => $telegraph  ->  message  (  'conditional message'  )  ->  send  ());\n  setBaseUrl  allows to override Telegram API url on a per-message basis:     Telegraph  ::  setBaseUrl  (  'https://my-secret-server.dev'  )  ->  message  (  'secret message'  )  ->  send  ();\n  setTitle  sets chat title     Telegraph  ::  setTitle  (  \"my chat\"  )  ->  send  ();\n  setDescription  sets chat description     Telegraph  ::  setDescription  (  \"a test chat with my bot\"  )  ->  send  ();\n  setChatPhoto  sets chat profile photo  chatInfo  retrieves Chat data from Telegram APIs     Telegraph  ::  chatInfo  ()  ->  send  ();\n   \n   /*\n   id: xxxxx\n   type: group\n   title: my telegram group\n   ...\n   */\n  setChatMenuButton  Set menu button. For detailed info, see   docs     Telegraph  ::  setChatMenuButton  ()  ->  default  ()  ->  send  ();   //restore default \n   Telegraph  ::  setChatMenuButton  ()  ->  commands  ()  ->  send  ();   //show bot commands in menu button \n   Telegraph  ::  setChatMenuButton  ()  ->  webApp  (  \"Web App\"  ,   \"https://my-web.app\"  )  ->  send  ();   //show start web app button\n  chatMenuButton  retrieves a bot current menu button info     Telegraph  ::  chatMenuButton  ()  ->  send  ();\n  getFileInfo  Retrieve file info from ID     Telegraph  ::  getFileInfo  ($fileId)  ->  send  ();\n  chatMemberCount  retrieves Chat member count     Telegraph  ::  chatMemberCount  ()  ->  send  ();\n  chatMember  retrieves a Chat member     Telegraph  ::  chatMember  ($userId)  ->  send  ();\n  userProfilePhotos  retrieves the User's profile photos     Telegraph  ::  userProfilePhotos  ($userId)  ->  send  ();\n  generateChatPrimaryInviteLink  generates a new primary invite link for a chat. Any previously generated primary link is revoked. For more info, see telegram   bot documentation     Telegraph  ::  generateChatPrimaryInviteLink  ()  ->  send  ();\n  createChatInviteLink  creates an additional invite link for a chat. For more info about options, see telegram   bot documentation     Telegraph  ::  createChatInviteLink  ()\n       ->  name  (  'September promotional link'  )      //optional\n       ->  expire  (  today  ()  ->  addMonth  ())             //optional\n       ->  memberLimit  (  42  )                         //optional\n       ->  withJoinRequest  ()                       //optional\n       ->  send  ();\n  editChatInviteLink  edits an existing invite link for a chat. For more info about options, see telegram   bot documentation     Telegraph  ::  editChatInviteLink  (  'http://t.me/123456'  )\n       ->  name  (  'new name'  )                 //optional\n       ->  expire  (  today  ()  ->  addYear  ())       //optional\n       ->  memberLimit  (  12  )                  //optional\n       ->  withJoinRequest  (  false  )           //optional\n       ->  send  ();\n  revokeChatInviteLink  revokes an existing invite link for a chat. For more info, see telegram   bot documentation     Telegraph  ::  revokeChatInviteLink  (  'http://t.me/123456'  )  ->  send  ();\n  setChatPermissions  set users permissions for a chat. For more info, see telegram   bot documentation     Telegraph  ::  setChatPermissions  ([\n       ChatPermissions  ::  CAN_INVITE_USERS  ,\n       ChatPermissions  ::  CAN_CHANGE_INFO  ,\n       ChatPermissions  ::  CAN_ADD_WEB_PAGE_PREVIEWS   =>   true  ,\n       ChatPermissions  ::  CAN_SEND_MESSAGES   =>   false  ,\n   ])  ->  send  ();\n  banChatMember  ban a user in a group, a supergroup or a channel. In the case of supergroups and channels, the user will not be able to return to the chat on their own using invite links. For more info, see telegram   bot documentation     Telegraph  ::  banChatMember  ($userid)\n       ->  until  (  now  ()  ->  addDay  ());        //optional, only for supergroups and channels\n       ->  andRevokeMessages  ()            //optional, always true for supergroups and channels\n       ->  send  ();\n  unbanChatMember  unban a user in a group, a supergroup or a channel. For more info, see telegram   bot documentation     Telegraph  ::  unbanChatMember  ($userid)  ->  send  ();\n  restrictChatMember  restrict a user in a group, a supergroup or a channel from taking the give actions. For more info, see telegram   bot documentation     Telegraph  ::  restrictChatMember  ($userid, [\n          DefStudio\\Telegraph\\Enums\\ChatPermissions  ::  CAN_PIN_MESSAGES   =>   false  ,\n          DefStudio\\Telegraph\\Enums\\ChatPermissions  ::  CAN_INVITE_USERS   =>   true  ,\n          DefStudio\\Telegraph\\Enums\\ChatPermissions  ::  CAN_SEND_MESSAGES  ,\n       ])\n       ->  until  (  now  ()  ->  addDay  ())          //optional\n       ->  send  ();\n  promoteChatMember  promotes a user in a group, a supergroup or a channel to administrator status. For more info, see telegram   bot documentation     Telegraph  ::  promoteChatMember  ($userid, [\n      DefStudio\\Telegraph\\Enums\\ChatAdminPermissions  ::  CAN_PIN_MESSAGES   =>   false  ,\n      DefStudio\\Telegraph\\Enums\\ChatAdminPermissions  ::  CAN_INVITE_USERS   =>   true  ,\n      DefStudio\\Telegraph\\Enums\\ChatAdminPermissions  ::  CAN_CHANGE_INFO  ,\n   ])\n   ->  send  ();\n  demoteChatMember  demote a user in a group, a supergroup or a channel from administrator status.     Telegraph  ::  demoteChatMember  ($userid)  ->  send  ();\n  poll  creates a native poll. For more info, see telegram   bot documentation     Telegraph  ::  poll  (  \"What's your favourite programming language?\"  )\n       ->  option  (  'php'  )\n       ->  option  (  'typescript'  )\n       ->  option  (  'rust'  )\n       ->  allowMultipeAnswers  ()\n       ->  validUntil  (  now  ()  ->  addMinutes  (  5  ))\n       ->  send  ();\n  quiz  creates a quiz. For more info, see telegram   bot documentation     Telegraph  ::  quiz  (  \"What's your favourite programming language?\"  )\n       ->  option  (  'php'  ,   correct  :   true  )\n       ->  option  (  'typescript'  )\n       ->  option  (  'rust'  )\n       ->  explanation  (  'We all love php, right?'  )\n       ->  validUntil  (  now  ()  ->  addMinutes  (  5  ))\n       ->  send  ();\n  dump  print a   dump()  of the current api call status for testing purposes     Telegraph  ::  message  (  'test'  )  ->  dump  ();\n  dd  print a   dd()  of the current api call status for testing purposes     Telegraph  ::  message  (  'test'  )  ->  dd  ();\n  withData  set custom Telegraph data attribute     Telegraph  ::  withData  (  'key'  ,   'value'  );\n  html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":210,"path":211,"dir":212,"title":213,"description":214,"keywords":215,"body":220},"content:13.models:1.telegraph-bot.md","/models/telegraph-bot","models","TelegraphBot","Bot informations are stored in database inside a telegraph_bots table and can be retrieved using DefStudio\\Telegraph\\Models\\TelegaphBot model or using a custom Bot model.",[216,217,218,219],"Custom Bot Model","Available methods","answerInlineQuery()","setBaseUrl()","  Bot informations are stored in database inside a   telegraph_bots  table and can be retrieved using   DefStudio\\Telegraph\\Models\\TelegaphBot  model or using a custom Bot model.  Custom Bot Model  To customize on your own Bot model, make sure that your custom model extends the   DefStudio\\Telegraph\\Models\\TelegraphBot , e.g.   App\\Models\\Bot , it will looks like this:     \u003C?  php\n   \n   namespace   App\\Models  ;\n   \n   use   DefStudio\\Telegraph\\Models\\TelegraphBot   as   BaseModel  ;\n   \n   class   Bot   extends   BaseModel\n   {\n   \n   }\n  You should specify the class name of your model in the   models.bot  key of the telegraph config file.     'models'   =>   [\n       'bot'   =>   App\\Models\\Bot  ::class  ,\n   ],\n  Available methods   url()  retrieves the bot url     /**   @var   \\DefStudio\\Telegraph\\Models\\TelegraphBot   $telegraphBot */\n   \n   $telegraphBot  ->  url  ();\n   \n   // https://t.me/my-bot-name\n   info()  retrieves the bot information from Telegraph APIs     /**   @var   \\DefStudio\\Telegraph\\Models\\TelegraphBot   $telegraphBot */\n   \n   $telegraphBot  ->  info  ();\n   \n   \n   /*\n   id: xxxxx\n   is_bot: true\n   first_name: telegraph-test\n   username: my_test_bot\n   can_join_groups: true\n   can_read_all_group_messages: false\n   supports_inline_queries: false\n   */\n   registerCommands()  register commands in Telegram Bot in order to display them to the user when the \"/\" key is pressed     /**   @var   \\DefStudio\\Telegraph\\Models\\TelegraphBot   $telegraphBot */\n   \n   $telegraphBot  ->  registerCommands  ([\n       'command1'   =>   'command 1 description'  ,\n       'command2'   =>   'command 2 description'\n   ])  ->  send  ();\n   unregisterCommands()  resets Telegram Bot registered commands     /**   @var   \\DefStudio\\Telegraph\\Models\\TelegraphBot   $telegraphBot */\n   \n   $telegraphBot  ->  unregisterCommands  ()  ->  send  ();\n   registerWebhook()  register a webhook url     /**   @var   \\DefStudio\\Telegraph\\Models\\TelegraphBot   $telegraphBot */\n   \n   $telegraphBot  ->  registerWebhook  ()  ->  send  ();\n   unregisterWebhook()  unregister a webhook url     /**   @var   \\DefStudio\\Telegraph\\Models\\TelegraphBot   $telegraphBot */\n   \n   $telegraphBot  ->  unregisterWebhook  ()  ->  send  ();\n   getWebhookDebugInfo()  retrieves webhook debug data     /**   @var   \\DefStudio\\Telegraph\\Models\\TelegraphBot   $telegraphBot */\n   \n   $telegraphBot  ->  getWebhookDebugInfo  ()  ->  send  ();\n   replyWebhook()  replies to a webhook callback     /**   @var   \\DefStudio\\Telegraph\\Models\\TelegraphBot   $telegraphBot */\n   \n   $telegraphBot  ->  replyWebhook  ($callbackQueryId,   'message received'  , $showAlert)  ->  send  ();\n   updates()  Retrieves the Bot message and callback query updates using   manual polling     /**   @var   \\DefStudio\\Telegraph\\Models\\TelegraphBot   $telegraphBot */\n   \n   $telegraphBot  ->  updates  ()  ->  each  (  function  (  TelegramUpdate   $update){\n       // ...\n   });\n   store()  Downloads a media file and stores it in the given path     /**   @var   DefStudio\\Telegraph\\DTO\\Photo   $photo */\n   \n   $telegraphBot  ->  store  ($photo,   Storage  ::  path  (  'bot/images'  ),   'The Photo.jpg'  );\n   getFileInfo()  Retrieve file info from ID     $telegraphBot  ->  getFileInfo  ($fileId)  ->  send  ();\n   answerInlineQuery()  send back the results for an inline query      $telegraphBot  ->  answerInlineQuery  ($inlineQuery  ->  id  (), [\n       InlineQueryResultPhoto  ::  make  ($logo  ->  id  .  \"-light\"  ,   \"https://logofinder.dev/  $logo  ->  id  /light.jpg\"  ,   \"https://logofinder.dev/  $logo  ->  id  /light/thumb.jpg\"  )\n           ->  caption  (  'Light Logo'  ),\n       InlineQueryResultPhoto  ::  make  ($logo  ->  id  .  \"-dark\"  ,   \"https://logofinder.dev/  $logo  ->  id  /dark.jpg\"  ,   \"https://logofinder.dev/  $logo  ->  id  /dark/thumb.jpg\"  )\n           ->  caption  (  'Light Logo'  ),\n   ])  ->  cache  (  seconds  :   600  )  ->  send  ();\n   setBaseUrl()  allows to override Telegram API url on a per-message basis:     $telegraphBot  ->  setBaseUrl  (  'https://my-secret-server.dev'  );\n  \nFollow \n  installation \n instructions for creating the database tables\n  html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":222,"path":223,"dir":212,"title":224,"description":225,"keywords":226,"body":243},"content:13.models:2.telegraph-chat.md","/models/telegraph-chat","TelegraphChat","Chat informations are stored in database inside a telegraph_chats table and can be retrieved using DefStudio\\Telegraph\\Models\\TelegaphChat model or using a custom Chat model.",[227,217,146,228,229,219,230,231,232,233,234,235,236,237,238,239,240,241,242,205,206],"Custom Chat Model","photo()","voice()","setTitle()","setDescription()","setChatPhoto()","generatePrimaryInviteLink()","createInviteLink()","editInviteLink()","revokeInviteLink()","setPermissions()","banMember()","unbanMember()","restrictMember()","promoteMember()","demoteMember()","  Chat informations are stored in database inside a   telegraph_chats  table and can be retrieved using   DefStudio\\Telegraph\\Models\\TelegaphChat  model or using a custom Chat model.  Custom Chat Model  To customize on your own Chat model, make sure that your custom model extends the   DefStudio\\Telegraph\\Models\\TelegraphChat , e.g.   App\\Models\\Chat , it will looks like this:     \u003C?  php\n   \n   namespace   App\\Models  ;\n   \n   use   DefStudio\\Telegraph\\Models\\TelegraphChat   as   BaseModel  ;\n   \n   class   Chat   extends   BaseModel\n   {\n   \n   }\n  You should specify the class name of your model in the   models.chat  key of the telegraph config file.     'models'   =>   [\n       'chat'   =>   App\\Models\\Chat  ::class  ,\n   ],\n  Available methods   info()  Retrieves the chat data from telegram     /**   @var   \\DefStudio\\Telegraph\\Models\\TelegraphChat   $telegraphChat */\n   \n   $telegraphChat  ->  info  ();\n   \n   /*\n   id: xxxxx\n   type: group\n   title: my telegram group\n   ...\n   */\n   memberCount()  Retrieves the chat member count from telegram     /**   @var   \\DefStudio\\Telegraph\\Models\\TelegraphChat   $telegraphChat */\n   \n   $telegraphChat  ->  info  ();   /* 42 */\n  Optional parameters  Attachments methods only supports required parameters, optional parameters can be sent through Telegraph   ->withData()  method:     $telegraphChat  ->  message  (  'hi'  )  ->  withData  (  'caption'  ,   'test'  )  ->  send  ();\n   $telegraphChat  ->  withData  (  'caption'  ,   'test'  )  ->  message  (  'hi'  )  ->  send  ();\n   message()  Starts a   Telegraph  call to send a message     /**   @var   \\DefStudio\\Telegraph\\Models\\TelegraphChat   $telegraphChat */\n   \n   $telegraphChat  ->  message  (  'hello!'  )  ->  send  ();\n   html()  Starts a   Telegraph  call to send a message using html formatting     /**   @var   \\DefStudio\\Telegraph\\Models\\TelegraphChat   $telegraphChat */\n   \n   $telegraphChat  ->  html  (  '\u003Cb>hello\u003C/b>'  )  ->  send  ();\n   markdown()  Starts a   Telegraph  call to send a message using markdown formatting     /**   @var   \\DefStudio\\Telegraph\\Models\\TelegraphChat   $telegraphChat */\n   \n   $telegraphChat  ->  markdown  (  '*hello*'  )  ->  send  ();\n   markdownV2()  Starts a   Telegraph  call to send a message using markdown V2 formatting     /**   @var   \\DefStudio\\Telegraph\\Models\\TelegraphChat   $telegraphChat */\n   \n   $telegraphChat  ->  markdownV2  (  '*hello*'  )  ->  send  ();\n   edit()  Starts a   Telegraph  call to edit a message     /**   @var   \\DefStudio\\Telegraph\\Models\\TelegraphChat   $telegraphChat */\n   \n   $telegraphChat  ->  edit  ($messageId)  ->  message  (  'new text'  )  ->  send  ();\n   editCaption()  Starts a   Telegraph  call to edit an attachment's caption     /**   @var   \\DefStudio\\Telegraph\\Models\\TelegraphChat   $telegraphChat */\n   \n   $telegraphChat  ->  editCaption  ($messageId)  ->  message  (  'new caption'  )  ->  send  ();\n   editMedia()  Starts a   Telegraph  call to edit a media messages with a new media content     /**   @var   \\DefStudio\\Telegraph\\Models\\TelegraphChat   $telegraphChat */\n   \n   $telegraphChat  ->  editMedia  ($messageId)  ->  photo  ($path)  ->  send  ();\n   $telegraphChat  ->  editMedia  ($messageId)  ->  document  ($path)  ->  send  ();\n   $telegraphChat  ->  editMedia  ($messageId)  ->  animation  ($path)  ->  send  ();\n   $telegraphChat  ->  editMedia  ($messageId)  ->  video  ($path)  ->  send  ();\n   $telegraphChat  ->  editMedia  ($messageId)  ->  audio  ($path)  ->  send  ();\n   replaceKeyboard()  Starts a   Telegraph  call to replace a message keyboard (see   keyboards  for details)     /**   @var   \\DefStudio\\Telegraph\\Models\\TelegraphChat   $telegraphChat */\n   \n   $telegraphChat  ->  replaceKeyboard  (\n       $messageId, \n       Keyboard  ::  make  ()  ->  buttons  ([\n           Button  ::  make  (  'open'  )  ->  url  (  'https://test.dev'  )\n       ])\n   )  ->  send  ();\n   deleteKeyboard()  Starts a   Telegraph  call to remove a message keyboard (see   keyboards  for details)     /**   @var   \\DefStudio\\Telegraph\\Models\\TelegraphChat   $telegraphChat */\n   \n   $telegraphChat  ->  deleteKeyboard  ($messageId)  ->  send  ();\n  \nFollow \n  installation \n instructions for creating the database tables\n   deleteMessage()  Starts a   Telegraph  call to delete a message     /**   @var   \\DefStudio\\Telegraph\\Models\\TelegraphChat   $telegraphChat */\n   \n   $telegraphChat  ->  deleteMessage  ($messageId)  ->  send  ();\n   forwardMessage()  forwards a message from another chat     /**   @var   \\DefStudio\\Telegraph\\Models\\TelegraphChat   $telegraphChat */\n   \n   $telegraphChat  ->  forwardMessage  ($fromChat, $messageId)  ->  send  ();\n   pinMessage()  Starts a   Telegraph  call to pin a message     /**   @var   \\DefStudio\\Telegraph\\Models\\TelegraphChat   $telegraphChat */\n   \n   $telegraphChat  ->  pinMessage  ($messageId)  ->  send  ();\n   unpinMessage()  Starts a   Telegraph  call to unpin a message     /**   @var   \\DefStudio\\Telegraph\\Models\\TelegraphChat   $telegraphChat */\n   \n   $telegraphChat  ->  pinMessage  ($messageId)  ->  send  ();\n   unpinAllMessages()  Starts a   Telegraph  call to unpin all messages     /**   @var   \\DefStudio\\Telegraph\\Models\\TelegraphChat   $telegraphChat */\n   \n   $telegraphChat  ->  unpinAllMessages  ()  ->  send  ();\n   document()  sends a document     $telegraphChat  ->  document  ($documentPath)  ->  send  ();\n   location()  sends a location attachment     $telegraphChat  ->  location  (  12.345  ,   -  54.321  )  ->  send  ();\n   action()  Tells the chat users that something is happening on the bot's side. The status is set for up to 5 seconds or when a new message is received from the bot.      use   DefStudio\\Telegraph\\Enums\\ChatActions  ;\n   use   DefStudio\\Telegraph\\Models\\TelegraphChat  ;\n   \n   /**   @var   TelegraphChat   $telegraphChat */\n   \n   $telegraphChat  ->  action  (  ChatActions  ::  TYPING  )  ->  send  ();\n   photo()  sends a photo     use   DefStudio\\Telegraph\\Enums\\ChatActions  ;\n   use   DefStudio\\Telegraph\\Models\\TelegraphChat  ;\n   \n   /**   @var   TelegraphChat   $telegraphChat */\n   \n   $telegraphChat  ->  photo  (  Storage  ::  path  (  'photo.jpg'  ))  ->  send  ();\n   voice()  sends a vocal message     use   DefStudio\\Telegraph\\Enums\\ChatActions  ;\n   use   DefStudio\\Telegraph\\Models\\TelegraphChat  ;\n   \n   /**   @var   TelegraphChat   $telegraphChat */\n   \n   $telegraphChat  ->  voice  (  Storage  ::  path  (  'voice.ogg'  ))  ->  send  ();\n   setBaseUrl()  allows to override Telegram API url on a per-message basis:     use   DefStudio\\Telegraph\\Enums\\ChatActions  ;\n   use   DefStudio\\Telegraph\\Models\\TelegraphChat  ;\n   \n   /**   @var   TelegraphChat   $telegraphChat */\n   \n   $telegraphChat  ->  setBaseUrl  (  'https://my-secret-server.dev'  )  ->  message  (  'secret message'  )  ->  send  ();\n   setTitle()  sets chat title     use   DefStudio\\Telegraph\\Enums\\ChatActions  ;\n   use   DefStudio\\Telegraph\\Models\\TelegraphChat  ;\n   \n   /**   @var   TelegraphChat   $telegraphChat */\n   \n   $telegraphChat  ->  setTitle  (  \"my chat\"  )  ->  send  ();\n   setDescription()  sets chat description     use   DefStudio\\Telegraph\\Enums\\ChatActions  ;\n   use   DefStudio\\Telegraph\\Models\\TelegraphChat  ;\n   \n   /**   @var   TelegraphChat   $telegraphChat */\n   \n   $telegraphChat  ->  setDescription  (  \"a test chat with my bot\"  )  ->  send  ();\n   setChatPhoto()  sets chat profile photo     use   DefStudio\\Telegraph\\Enums\\ChatActions  ;\n   use   DefStudio\\Telegraph\\Models\\TelegraphChat  ;\n   \n   /**   @var   TelegraphChat   $telegraphChat */\n   \n   $telegraphChat  ->  setChatPhoto  (  Storage  ::  path  (  'photo.jpg'  ))  ->  send  ();\n   generatePrimaryInviteLink()  generates a new primary invite link for a chat. Any previously generated primary link is revoked. For more info, see telegram   bot documentation     use   DefStudio\\Telegraph\\Models\\TelegraphChat  ;\n   \n   /**   @var   TelegraphChat   $telegraphChat */\n   \n   $telegraphChat  ->  generatePrimaryInviteLink  ()  ->  send  ();\n   createInviteLink()  creates an additional invite link for a chat. For more info about options, see telegram   bot documentation     use   DefStudio\\Telegraph\\Models\\TelegraphChat  ;\n   \n   /**   @var   TelegraphChat   $telegraphChat */\n   \n   $telegraphChat  ->  createInviteLink  ()\n       ->  name  (  'September promotional link'  )      //optional\n       ->  expire  (  today  ()  ->  addMonth  ())             //optional\n       ->  memberLimit  (  42  )                         //optional\n       ->  withJoinRequest  ()                       //optional\n       ->  send  ();\n   editInviteLink()  edits an existing invite link for a chat. For more info about options, see telegram   bot documentation     use   DefStudio\\Telegraph\\Models\\TelegraphChat  ;\n   \n   /**   @var   TelegraphChat   $telegraphChat */\n   \n   $telegraphChat  ->  editInviteLink  (  'http://t.me/123456'  )\n       ->  name  (  'new name'  )                 //optional\n       ->  expire  (  today  ()  ->  addYear  ())       //optional\n       ->  memberLimit  (  12  )                  //optional\n       ->  withJoinRequest  (  false  )           //optional\n       ->  send  ();\n   revokeInviteLink()  revokes an existing invite link for a chat. For more info, see telegram   bot documentation     use   DefStudio\\Telegraph\\Models\\TelegraphChat  ;\n   \n   /**   @var   TelegraphChat   $telegraphChat */\n   \n   $telegraphChat  ->  revokeInviteLink  (  'http://t.me/123456'  )  ->  send  ();\n   setPermissions()  set users permissions for a chat. For more info, see telegram   bot documentation     use   DefStudio\\Telegraph\\Models\\TelegraphChat  ;\n   \n   /**   @var   TelegraphChat   $telegraphChat */\n   \n   $telegraphChat  ->  setPermissions  ([\n       ChatPermissions  ::  CAN_INVITE_USERS  ,\n       ChatPermissions  ::  CAN_CHANGE_INFO  ,\n       ChatPermissions  ::  CAN_ADD_WEB_PAGE_PREVIEWS   =>   true  ,\n       ChatPermissions  ::  CAN_SEND_MESSAGES   =>   false  ,\n   ])  ->  send  ();\n   banMember()  ban a user in a group, a supergroup or a channel. In the case of supergroups and channels, the user will not be able to return to the chat on their own using invite links. For more info, see telegram   bot documentation     use   DefStudio\\Telegraph\\Models\\TelegraphChat  ;\n   \n   /**   @var   TelegraphChat   $telegraphChat */\n   \n   $telegraphChat  ->  banMember  ($userId)\n       ->  until  (  now  ()  ->  addDay  ());        //optional, only for supergroups and channels\n       ->  andRevokeMessages  ()            //optional, always true for supergroups and channels\n       ->  send  ();\n   unbanMember()  unban a user in a group, a supergroup or a channel. For more info, see telegram   bot documentation     use   DefStudio\\Telegraph\\Models\\TelegraphChat  ;\n   \n   /**   @var   TelegraphChat   $telegraphChat */\n   \n   $telegraphChat  ->  unbanMember  ($userId)  ->  send  ();\n   restrictMember()  restrict a user in a group, a supergroup or a channel from taking the give actions. For more info, see telegram   bot documentation     use   DefStudio\\Telegraph\\Models\\TelegraphChat  ;\n   \n   /**   @var   TelegraphChat   $telegraphChat */\n   \n   $telegraphChat  ->  restrictMember  ($userId[\n          DefStudio\\Telegraph\\Enums\\ChatPermissions  ::  CAN_PIN_MESSAGES   =>   false  ,\n          DefStudio\\Telegraph\\Enums\\ChatPermissions  ::  CAN_INVITE_USERS   =>   true  ,\n          DefStudio\\Telegraph\\Enums\\ChatPermissions  ::  CAN_SEND_MESSAGES  ,\n       ])\n       ->  until  (  now  ()  ->  addDay  ())          //optional+\n       ->  send  ();\n   promoteMember()  promotes a user in a group, a supergroup or a channel to administrator status. For more info, see telegram   bot documentation     use   DefStudio\\Telegraph\\Models\\TelegraphChat  ;\n   \n   /**   @var   TelegraphChat   $telegraphChat */\n   \n   $telegraphChat  ->  promoteMember  ($userid, [\n          DefStudio\\Telegraph\\Enums\\ChatAdminPermissions  ::  CAN_PIN_MESSAGES   =>   false  ,\n          DefStudio\\Telegraph\\Enums\\ChatAdminPermissions  ::  CAN_INVITE_USERS   =>   true  ,\n          DefStudio\\Telegraph\\Enums\\ChatAdminPermissions  ::  CAN_CHANGE_INFO  ,\n       ])\n       ->  send  ();\n   demoteMember()  demote a user in a group, a supergroup or a channel from administrator status.     use   DefStudio\\Telegraph\\Models\\TelegraphChat  ;\n   \n   /**   @var   TelegraphChat   $telegraphChat */\n   $telegraphChat  ->  demoteMember  ($userid)  ->  send  ();\n   poll  creates a native poll. For more info, see telegram   bot documentation     use   DefStudio\\Telegraph\\Models\\TelegraphChat  ;\n   \n   /**   @var   TelegraphChat   $telegraphChat */\n   $telegraphChat  ->  poll  (  \"What's your favourite programming language?\"  )\n       ->  option  (  'php'  )\n       ->  option  (  'typescript'  )\n       ->  option  (  'rust'  )\n       ->  allowMultipleAnswers  ()\n       ->  validUntil  (  now  ()  ->  addMinutes  (  5  ))\n       ->  send  ();\n   quiz  creates a quiz. For more info, see telegram   bot documentation     /**   @var   DefStudio\\Telegraph\\Models\\TelegraphChat   $telegraphChat */\n   $telegraphChat  ->  quiz  (  \"What's your favourite programming language?\"  )\n       ->  option  (  'php'  ,   correct  :   true  )\n       ->  option  (  'typescript'  )\n       ->  option  (  'rust'  )\n       ->  explanation  (  'We all love php, right?'  )\n       ->  validUntil  (  now  ()  ->  addMinutes  (  5  ))\n       ->  send  ();\n   dice  An animated emoji attachment that will display a random value can be sent through Telegraph   ->dice()  method:     /**   @var   DefStudio\\Telegraph\\Models\\TelegraphChat   $telegraphChat */\n   $telegraphChat  ->  dice  ()  ->  send  ();\n   animation  An animation attachment can be sent through Telegraph   ->animation()  method:     /**   @var   DefStudio\\Telegraph\\Models\\TelegraphChat   $telegraphChat */\n   $telegraphChat  ->  animation  ()  ->  send  ();\n   video  A video attachment can be sent through Telegraph   ->video()  method:     /**   @var   DefStudio\\Telegraph\\Models\\TelegraphChat   $telegraphChat */\n   $telegraphChat  ->  video  ()  ->  send  ();\n   audio  An audio attachment can be sent through Telegraph   ->audio()  method:     /**   @var   DefStudio\\Telegraph\\Models\\TelegraphChat   $telegraphChat */\n   $telegraphChat  ->  audio  ()  ->  send  ();\n   menuButton  Retrieves chat menu button     /**   @var   DefStudio\\Telegraph\\Models\\TelegraphChat   $telegraphChat */\n   $button   =   $telegraphChat  ->  menuButton  ()  ->  send  ();\n   setMenuButton  set chat menu button     /**   @var   DefStudio\\Telegraph\\Models\\TelegraphChat   $telegraphChat */\n   $telegraphChat  ->  setMenuButton  ()  ->  default  ()  ->  send  ();   //restore default \n   $telegraphChat  ->  setMenuButton  ()  ->  commands  ()  ->  send  ();   //show bot commands in menu button \n   $telegraphChat  ->  setMenuButton  ()  ->  webApp  (  \"Web App\"  ,   \"https://my-web.app\"  )  ->  send  ();   //show start web app button\n  html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":245,"path":246,"dir":247,"title":248,"description":249,"keywords":250,"body":254},"content:14.webhooks:1.overview.md","/webhooks/overview","webhooks","Webhooks Overview","Telegram bots can interact with chats and users through a webhook system that enables it to be updated about chats changes, new commands and user interactions without continuously polling Telegram APIs for updates.",[251,252,253],"Default Handler","Custom Handler","Handle requests from unknown chats","  Telegram bots can interact with chats and users through a webhook system that enables it to be updated about chats changes, new commands and user interactions without continuously polling Telegram APIs for updates.  \nBy default webhooks can handle incoming requests from \"known\" chats (the one stored in database as TelegraphChat models) and will reject all others. In order to handle unknown chats see \n  below  Default Handler  A default \"do nothing\" handler is shipped with Telegraph installation, it can only handle a single chat command:   /chatid\n  And answers with the ID of the chat the command is issued into. It is useful to get the ChatID in order to register a new chat in Telegraph  Custom Handler  In order to write custom webhook and commands handlers the default handler must be switched with a custom one     // app/Http/Webhooks/MyWebhookHandler.php\n   \n   class   MyWebhookHandler   extends   \\DefStudio\\Telegraph\\Handlers\\  WebhookHandler\n   {\n       public   function   myCustomHandler  ()  :   void\n       {\n           // ... My awesome code\n       }\n   }\n  \nA custom webhook handler must extend \n  DefStudio\\Telegraph\\Handlers\\WebhookHandler \n and has to be registered in \n  config('telegraph.webhook_handler')  A detailed description of how WebhookHandlers work can be found in the next sections  Handle requests from unknown chats  By default webhooks can handle incoming requests from \"known\" chats (the one stored in database as TelegraphChat models) and will reject all others.  Callback queries, commands and messages handling from unknown chats can be enabled from telegraph config in security settings:      'security'   =>   [\n       /*\n        * if enabled, allows callback queries from unregistered chats\n        */\n       'allow_callback_queries_from_unknown_chats'   =>   true  ,\n   \n       /*\n        * if enabled, allows messages and commands from unregistered chats\n        */\n       'allow_messages_from_unknown_chats'   =>   true  ,\n   \n        /*\n        * if enabled, store unknown chats as new TelegraphChat models\n        */\n       'store_unknown_chats_in_db'   =>   true  ,\n   ],\n  html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":256,"path":257,"dir":247,"title":258,"description":259,"keywords":260,"body":262},"content:14.webhooks:2.registering-webhooks.md","/webhooks/registering-webhooks","Register Webhooks","In order to receive Telegram updates through a webhook, it has to be registered to a specific bot. This can be accomplished both programmatically and through an artisan command",[261,53],"artisan command","  In order to receive Telegram updates through a webhook, it has to be registered to a specific bot. This can be accomplished both programmatically and through an artisan command  artisan command  You can register a webhook calling the   telegraph:set-webhook  artisan command:     php   artisan   telegraph:set-webhook\n  programmatically  if you are implementing a custom bot management logic, you can register a webhok using the   TelegraphBot  model:     /**   @var   DefStudio\\Telegraph\\Models\\TelegraphBot   $telegraphBot */\n   \n   $telegraphBot  ->  registerWebhook  ()  ->  send  ();\n  \nManual updates polling is not available if a webhook is set up for the bot. Webhook should be remove first using its \n  unregisterWebhook \n method\n  html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":264,"path":265,"dir":247,"title":266,"description":267,"keywords":268,"body":269},"content:14.webhooks:3.deleting-webhooks.md","/webhooks/deleting-webhooks","Unregistering Webhooks","A webhook can be unergistered from a telegraph bot. This can be accomplished both programmatically and through an artisan command",[261,53],"  A webhook can be unergistered from a telegraph bot. This can be accomplished both programmatically and through an artisan command  artisan command  You can unregister a webhook calling the   telegraph:unset-webhook  artisan command:     php   artisan   telegraph:unset-webhook\n  programmatically  if you are implementing a custom bot management logic, you can unregister a webhook using the   TelegraphBot  model:     /**   @var   DefStudio\\Telegraph\\Models\\TelegraphBot   $telegraphBot */\n   \n   $telegraphBot  ->  unregisterWebhook  ()  ->  send  ();\n  Pending updates  It may happen that there are pending message updates when deleting a webhook. By default they are kept in order to retrieve them through a manual polling. To drop these updates, use the   --drop-pending-updates  artisan command option     php   artisan   telegraph:unset-webhook   --drop-pending-updates\n  or using a parameter inside the method call:     $dropPendingUpdates   =   true  ;\n   \n   $telegraphBot  ->  unregisterWebhook  ($dropPendingUpdates)  ->  send  ();\n  html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":271,"path":272,"dir":247,"title":273,"description":274,"keywords":275,"body":281},"content:14.webhooks:4.webhook-request-types.md","/webhooks/webhook-request-types","Webhook Request Types","Telegraph can handle four incoming webhook request types: Chat Messages,  Chat Commands, Callback Queries and Inline Queries:",[276,277,278,279,280],"Chat Messages","Chat Commands","Callback Queries","Inline queries","Member activities","  Telegraph can handle four incoming webhook request types:   Chat Messages ,    Chat Commands ,   Callback Queries  and   Inline Queries :  Chat Messages  Plain chat messages (messages that are not commands or queries) can be handled by overriding   DefStudio\\Telegraph\\Handlers\\WebhookHandler::handleChatMessage()  method:     class   CustomWebhookHandler   extends   WebhookHandler\n   {\n       protected   function   handleChatMessage  (  Stringable   $text)  :   void\n       {\n           // in this example, a received message is sent back to the chat\n           $this  ->  chat  ->  html  (  \"Received:   $text  \"  )  ->  send  ();\n       }\n   }\n  \nA bot can read non-command/queries messages only if its \n  privacy mode \n is disabled. To change a bot privacy settings see \n  this guide  You can also handle any content of Telegram, like: Contact, Photo, Voice and etc...     class   CustomWebhookHandler   extends   WebhookHandler\n   {\n       protected   function   handleChatMessage  (  Stringable   $text)  :   void\n       {\n           // checks that the contact matches the sender ID\n   \n           $contactUserId   =   $this  ->  message  ->  contact  ()  ->  userId  ();\n           $senderId   =   $this  ->  message  ->  from  ()  ->  id  ();\n   \n           if  ($contactUserId   ==   $senderId){\n               $this  ->  reply  (  'this is your contact'  );\n           }  else  {\n               $this  ->  reply  (  'this is NOT your contact'  );  \n           }\n       }\n   }\n  Chat Commands  Telegraph bots can receive commands from chats where they are registered. A command is a telegram message has a   slash  (  / ) char followed by a descriptive word:   /hi Fabio\n  what the command will trigger is up to the developer, but a webhook will react to it if it has a public method named as the command:     class   CustomWebhookHandler   extends   WebhookHandler\n   {\n       public   function   hi  ()\n       {\n           $this  ->  chat  ->  markdown  (  \"*Hi* happy to be here!\"  )  ->  send  ();\n       }\n   }\n  optionally, the handler method can receive the command parameters:     class   CustomWebhookHandler   extends   WebhookHandler\n   {\n       public   function   hi  (  string   $userName)\n       {\n           $this  ->  chat  ->  markdown  (  \"*Hi*   $userName  , happy to be here!\"  )  ->  send  ();\n       }\n   }\n  The full chat message data can be retrieved through the    DefStudio\\Telegraph\\DTO\\Message  DTO:     class   CustomWebhookHandler   extends   WebhookHandler\n   {\n       public   function   hi  ()\n       {\n           $text   =   $this  ->  message  ->  text  ();   // /hi Fabio\n       }\n   }\n  Unknown commands  The default Telegraph's behaviour for unknown commands is to report an exception in application log (this can be disabled in telegraph config) and\nanswer the user that the command is unknown  A custom handler can be defined by overriding the   WebhookHandler::handleUnknownCommand  method:     class   MyWebhookHandler   extends   WebhookHandler\n   {\n       // ... \n   \n       protected   function   handleUnknownCommand  (  Stringable   $text)  :   void\n       {\n           if   (  !self::  $handleUnknownCommands) {\n               parent::  handleUnknownCommand  ($text);\n           }\n   \n           $this  ->  chat  ->  html  (  \"I can't understand your command:   $text  \"  )  ->  send  ();\n       }\n   }\n  Callback Queries  Bots messages may ship with keyboard of buttons that trigger actions when pressed:   when pressed, a new call will be forwarded to the webhook with the following payload   action:dismiss;notification-id:42\n  and the   dismiss  action will be handled by a corresponding public method in the custom webhook handler:     class   CustomWebhookHandler   extends   WebhookHandler\n   {\n       public   function   dismiss  ()\n       {\n           $notificationId   =   $this  ->  data  ->  get  (  'notification-id'  );   //42\n   \n           Notification  ::  find  ($notificationId)  ->  dismiss  ();\n   \n           $this  ->  reply  (  \"notification dismissed\"  );\n       }\n   }\n  The full callback query data can be retrieved through the    DefStudio\\Telegraph\\DTO\\CallbackQuery  DTO     class   CustomWebhookHandler   extends   WebhookHandler\n   {\n       public   function   dismiss  ()\n       {\n           $notificationId   =   $this  ->  callbackQuery  ->  data  ()  ->  get  (  'notification-id'  );   //42\n   \n           Notification  ::  find  ($notificationId)  ->  dismiss  ();\n   \n           $this  ->  reply  (  \"notification dismissed\"  );\n       }\n   }\n  Inline queries  Users can interact with a bot through inline queries calling it by typing its name followed by the query. The query is sent to the webhook (or can be   manually polled ) wrapped in a    DefStudio\\Telegraph\\DTO\\InlineQuery . For more information see   inline bot page  and   the official api documentation  \nInline queries should be enabled inside bot configuration (see \n  here \n for more info)\n  Inside a   WebhookHandler , incoming inline queries are handled by overriding the   handleInlineQuery  method:     use   DefStudio\\Telegraph\\DTO\\InlineQuery  ;  use   DefStudio\\Telegraph\\DTO\\InlineQueryResultPhoto  ;\n   \n   class   CustomWebhookHandler   extends   WebhookHandler\n   {\n       public   function   handleInlineQuery  (  InlineQuery   $inlineQuery)  :   void\n       {\n           $query   =   $inlineQuery  ->  query  ();   // \"pest logo\"\n   \n           $logo   =   LogoFinder  ::  search  ($query);   // the code to handle the query. just an example here\n   \n           $this  ->  bot  ->  answerInlineQuery  ($inlineQuery  ->  id  (), [\n               InlineQueryResultPhoto  ::  make  ($logo  ->  id  .  \"-light\"  ,   \"https://logofinder.dev/  $logo  ->  id  /light.jpg\"  ,   \"https://logofinder.dev/  $logo  ->  id  /light/thumb.jpg\"  )\n                   ->  caption  (  'Light Logo'  ),\n               InlineQueryResultPhoto  ::  make  ($logo  ->  id  .  \"-dark\"  ,   \"https://logofinder.dev/  $logo  ->  id  /dark.jpg\"  ,   \"https://logofinder.dev/  $logo  ->  id  /dark/thumb.jpg\"  )\n                   ->  caption  (  'Light Logo'  ),\n           ])  ->  send  ();\n       }\n   }\n  Different kind of result can be sent through the handler:   Article (   DefStudio\\Telegraph\\DTO\\InlineQueryResultArticle )  Audio (   DefStudio\\Telegraph\\DTO\\InlineQueryResultAudio )  Contact (   DefStudio\\Telegraph\\DTO\\InlineQueryResultContact )  Game (coming soon)  Document (   DefStudio\\Telegraph\\DTO\\InlineQueryResultDocument )  Gif (   DefStudio\\Telegraph\\DTO\\InlineQueryResultGif )  Location (   DefStudio\\Telegraph\\DTO\\InlineQueryResultLocation )  Mpeg4Gif (   DefStudio\\Telegraph\\DTO\\InlineQueryResultMpeg4Gif )  Photo(   DefStudio\\Telegraph\\DTO\\InlineQueryResultPhoto )  Venue (coming soon)  Video (   DefStudio\\Telegraph\\DTO\\InlineQueryResultVideo )  Voice (   DefStudio\\Telegraph\\DTO\\InlineQueryResultVoice )  Member activities  Telegraph bots can listen for members join/leave activity in chats where they are registered and handle them by overriding   handleChatMemberJoined  and   handleChatMemberLeaved  methods:  Member joined     class   CustomWebhookHandler   extends   WebhookHandler\n   {\n       protected   function   handleChatMemberJoined  (  User   $member)  :   void\n       {\n           $this  ->  chat  ->  html  (  \"Welcome {  $member  ->  firstName  ()}\"  )  ->  send  ();\n       }\n   }\n  Member left     class   CustomWebhookHandler   extends   WebhookHandler\n   {\n       protected   function   handleChatMemberLeft  (  User   $member)  :   void\n       {\n           $this  ->  chat  ->  html  (  \"{  $member  ->  firstName  ()} just left\"  )  ->  send  ();\n       }\n   }\n  html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":283,"path":284,"dir":247,"title":285,"description":286,"keywords":287,"body":288},"content:14.webhooks:5.callback-data.md","/webhooks/callback-data","Retrieve Callback Data","Callback query data must be defined with the following structure:",[],"  Callback query data must be defined with the following structure:   action:action_name;key1:foo;key2:bar\n  and will be handled by a public   action_name  method inside a custom   webhook handler .   Telegraph  implements some useful methods to interact with the received callback query:  Data can be retrieved from the payload using   ->get()  method:     class   CustomWebhookHandler   extends   WebhookHandler\n   {\n       public   function   dismiss  (){\n           //...\n   \n           $key1   =   $this  ->  data  ->  get  (  'key1'  );   //foo\n   \n           $key3   =   $this  ->  data  ->  get  (  'key1'  ,   'default value'  );   //default value\n       }\n   }\n  html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":290,"path":291,"dir":247,"title":292,"description":293,"keywords":294,"body":295},"content:14.webhooks:6.callback-reply.md","/webhooks/callback-reply","Reply To A Callback Query","A visual feedback can be returned to the chat as a tooltip with the ->reply() method:",[],"  A visual feedback can be returned to the chat as a tooltip with the   ->reply()  method:     class   CustomWebhookHandler   extends   WebhookHandler\n   {\n       public   function   dismiss  (){\n           //...\n   \n           $this  ->  reply  (  \"Notification dismissed\"  );\n       }\n   }\n  html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":297,"path":298,"dir":247,"title":299,"description":300,"keywords":301,"body":302},"content:14.webhooks:7.keyboard-interaction.md","/webhooks/keyboard-interaction","Interact With The Chat Keyboard","The keyboard that triggered the callback can be retrieved through the $originalKeyboard property, a Keyboard object that holds the buttons and can be manipulated with some dedicated methods:",[178,163],"  The keyboard that triggered the callback can be retrieved through the   $originalKeyboard  property, a   Keyboard  object that holds the buttons and can be manipulated with some dedicated methods:  replaceKeyboard  The entire keyboard can be replaced using the   ->replaceKeyboard()  method:     class   CustomWebhookHandler   extends   WebhookHandler\n   {\n       public   function   dismiss  (){\n           //...\n   \n           $newKeyboard   =   $this  ->  originalKeyboard\n               ->  deleteButton  (  'Dismiss'  ); \n   \n           $this  ->  replaceKeyboard  ($newKeyboard);\n       }\n   }\n  deleteKeyboard  The keyboard can be removed using the   ->deleteKeyboard()  method:     class   CustomWebhookHandler   extends   WebhookHandler\n   {\n       public   function   dismiss  (){\n           //...\n   \n           $this  ->  deleteKeyboard  ();\n       }\n   }\n  html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":304,"path":305,"dir":247,"title":306,"description":307,"keywords":308,"body":309},"content:14.webhooks:8.manual-polling.md","/webhooks/manual-polling","Manual updates polling","As an aternative to set up a webhook, a bot updates can be fetched by periodically polling Telegram APIs",[],"  As an aternative to set up a webhook, a bot updates can be fetched by periodically polling Telegram APIs  \nManual updates polling is not available if a webhook is set up for the bot. Webhook should be remove first using its \n  unregisterWebhook \n method\n  in order to get the updates, an   ->updates()  method is available in the   TelegraphBot  model:     $updates   =   $telegraphBot  ->  updates  ();\n  the call will result in a collection of    DefStudio\\Telegraph\\DTO\\TelegramUpdate  instances, one for each update, sorted by the oldest one.  It is advised to keep track of the    TelegramUpdate::id()  in order to avoid processing the same update multiple times.  The content of each update depends on the update type (  Chat Message  or   Callback Query ) and on the specific message type. Refer to the   DTO  section for more details.  html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":311,"path":312,"dir":247,"title":313,"description":314,"keywords":315,"body":339},"content:14.webhooks:9.dto.md","/webhooks/dto","Incoming Data","Data obtained from manual polling or webhooks is available through a set of DTO:",[316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338],"DefStudio\\Telegraph\\DTO\\TelegramUpdate","DefStudio\\Telegraph\\DTO\\Message","DefStudio\\Telegraph\\DTO\\CallbackQuery","DefStudio\\Telegraph\\DTO\\User","DefStudio\\Telegraph\\DTO\\Audio","DefStudio\\Telegraph\\DTO\\Animation","DefStudio\\Telegraph\\DTO\\Document","DefStudio\\Telegraph\\DTO\\Photo","DefStudio\\Telegraph\\DTO\\Video","DefStudio\\Telegraph\\DTO\\Location","DefStudio\\Telegraph\\DTO\\Contact","DefStudio\\Telegraph\\DTO\\Voice","DefStudio\\Telegraph\\DTO\\InlineQuery","DefStudio\\Telegraph\\DTO\\InlineQueryResultGif","DefStudio\\Telegraph\\DTO\\InlineQueryResultPhoto","DefStudio\\Telegraph\\DTO\\InlineQueryResultContact","DefStudio\\Telegraph\\DTO\\InlineQueryResultArticle","DefStudio\\Telegraph\\DTO\\InlineQueryResultMpeg4Gif","DefStudio\\Telegraph\\DTO\\InlineQueryResultVideo","DefStudio\\Telegraph\\DTO\\InlineQueryResultAudio","DefStudio\\Telegraph\\DTO\\InlineQueryResultVoice","DefStudio\\Telegraph\\DTO\\InlineQueryResultDocument","DefStudio\\Telegraph\\DTO\\InlineQueryResultLocation","  Data obtained from manual polling or webhooks is available through a set of DTO:   DefStudio\\Telegraph\\DTO\\TelegramUpdate  contains incoming data (a message or a callback query)    ->id()  incoming   update_id   ->message()  (optional) an instance of    DefStudio\\Telegraph\\DTO\\Message   ->callbackQuery()  (optional) an instance of    DefStudio\\Telegraph\\DTO\\CallbackQuery   DefStudio\\Telegraph\\DTO\\Message    ->id()  incoming   message_id   ->date()  a   CarbonInterface  holding the message sent date   ->editDate()  a   CarbonInterface  holding the message last edit date   ->text()  the message text   ->protected()  a boolean flag that states the message is protected from forwarding and download   ->from()  (optional) an instance of    DefStudio\\Telegraph\\DTO\\User  holding data about the message's sender   ->forwardedFrom()  (optional) an instance of    DefStudio\\Telegraph\\DTO\\User  holding data about a forwarded message's original sender   ->chat()  (optional) an instance of    DefStudio\\Telegraph\\DTO\\Chat  holding data about the chat to which the message belongs to   ->keyboard()  (optional) an instance of    DefStudio\\Telegraph\\Keyboard\\Keyboard  holding the message inline keyboard   ->replyToMessage()  (optional) an instance of the original    DefStudio\\Telegraph\\DTO\\Message  that the current message is replying   ->photos()  (optional) a collection of    DefStudio\\Telegraph\\DTO\\Photo  holding data about the contained image resolutions   ->animation()  (optional) an instance of    DefStudio\\Telegraph\\DTO\\Photo  holding data about the contained animation   ->audio()  (optional) an instance of    DefStudio\\Telegraph\\DTO\\Audio  holding data about the contained audio   ->document()  (optional) an instance of    DefStudio\\Telegraph\\DTO\\Document  holding data about the contained document   ->video()  (optional) an instance of    DefStudio\\Telegraph\\DTO\\Video  holding data about the contained video   ->location()  (optional) an instance of    DefStudio\\Telegraph\\DTO\\Location  holding data about the contained location   ->contact()  (optional) an instance of    DefStudio\\Telegraph\\DTO\\Contact  holding data about the contained contact data   ->voice()  (optional) an instance of    DefStudio\\Telegraph\\DTO\\Voice  holding data about the contained voical message   ->newChatMembers()  a collection of    DefStudio\\Telegraph\\DTO\\User  holding the list of users that joined the group/supergroup   ->leftChatMember()  (optional) an instance of    DefStudio\\Telegraph\\DTO\\User  holding data about the user that left the group/supergroup   ->webAppData()  (optional) incoming data from sendData method of telegram WebApp   DefStudio\\Telegraph\\DTO\\CallbackQuery    ->id()  incoming   callback_query_id   ->from()  (optional) an instance of the    DefStudio\\Telegraph\\DTO\\User  that triggered the callback query   ->message()  (optional) an instance of the    DefStudio\\Telegraph\\DTO\\Message  that triggered the callback query   ->data()  an   Illuminate\\Support\\Collection  that holds the key/value pairs of the callback query data   DefStudio\\Telegraph\\DTO\\User    ->id()  user ID   ->isBot()  marks if the user is a bot or a real user   ->firstName()  user's first name   ->lastName()  user's last name   ->userName()  user's username   DefStudio\\Telegraph\\DTO\\Audio    ->id()  file ID   ->duration()  audio duration   ->title()  (optional) audio title   ->filename()  (optional) audio file name   ->mimeType()  (optional) audio MIME type   ->filesize()  (optional) audio file size in Bytes   ->thumbnail()  (optional) an instance of the    DefStudio\\Telegraph\\DTO\\Photo  that holds data about the thumbnail   DefStudio\\Telegraph\\DTO\\Animation    ->id()  file ID   ->width()  animation width   ->height()  animation height   ->duration()  animation duration   ->filename()  (optional) animation file name   ->mimeType()  (optional) animation MIME type   ->filesize()  (optional) animation file size in Bytes   ->thumbnail()  (optional) an instance of the    DefStudio\\Telegraph\\DTO\\Photo  that holds data about the thumbnail   DefStudio\\Telegraph\\DTO\\Document    ->id()  file ID   ->filename()  (optional) document file name   ->mimeType()  (optional) document MIME type   ->filesize()  (optional) document file size in Bytes   ->thumbnail()  (optional) an instance of the    DefStudio\\Telegraph\\DTO\\Photo  that holds data about the thumbnail   DefStudio\\Telegraph\\DTO\\Photo    ->id()  file ID   ->width()  photo width   ->height()  photo height   ->filesize()  (optional) photo file size in Bytes   DefStudio\\Telegraph\\DTO\\Video    ->id()  file ID   ->width()  video width   ->height()  video height   ->duration()  video duration   ->filename()  (optional) video file name   ->mimeType()  (optional) video MIME type   ->filesize()  (optional) video file size in Bytes   ->thumbnail()  (optional) an instance of the    DefStudio\\Telegraph\\DTO\\Photo  that holds data about the thumbnail   DefStudio\\Telegraph\\DTO\\Location    ->latitude()  location latitude   ->longitude()  location longitude   ->accuracy()  (optional) location horizontal accuracy   DefStudio\\Telegraph\\DTO\\Contact    ->phoneNumber()  contact's phone number   ->firstName()  contact's first name   ->lastName()  (optional) contact's last name   ->userId()  (optional) contact's telegram user ID   ->vcard()  (optional) contact's   vCard   DefStudio\\Telegraph\\DTO\\Voice    ->id()  file ID   ->duration()  audio duration   ->mimeType()  (optional) audio MIME type   ->filesize()  (optional) audio file size in Bytes   DefStudio\\Telegraph\\DTO\\InlineQuery    ->id()  inline query   id   ->query()  the query typed by the user after the bot's name   ->from()  an instance of    DefStudio\\Telegraph\\DTO\\User  holding data about the user that started the query   ->offset()  offset of the results to be returned, can be controlled by the bot   ->chat_type()  type of the chat, from which the inline query was sent. Can be either “sender” for a private chat with the inline query sender, “private”, “group”, “supergroup”, or “channel”. The chat type should be always known for requests sent from official clients and most third-party clients, unless the request was sent from a secret chat   ->location()  (optional) an instance of    DefStudio\\Telegraph\\DTO\\Location  containing sender location, only for bots that request user location.   DefStudio\\Telegraph\\DTO\\InlineQueryResultGif  This is a DTO for outgoing data, wraps info about the Gif result returned to the user   DefStudio\\Telegraph\\DTO\\InlineQueryResultPhoto  This is a DTO for outgoing data, wraps info about the Photo result returned to the user   DefStudio\\Telegraph\\DTO\\InlineQueryResultContact  This is a DTO for outgoing data, wraps info about the Contact result returned to the user   DefStudio\\Telegraph\\DTO\\InlineQueryResultArticle  This is a DTO for outgoing data, wraps info about the Article result returned to the user   DefStudio\\Telegraph\\DTO\\InlineQueryResultMpeg4Gif  This is a DTO for outgoing data, wraps info about the Mpeg4Gif result returned to the user   DefStudio\\Telegraph\\DTO\\InlineQueryResultVideo  This is a DTO for outgoing data, wraps info about the Video result returned to the user   DefStudio\\Telegraph\\DTO\\InlineQueryResultAudio  This is a DTO for outgoing data, wraps info about the Audio result returned to the user   DefStudio\\Telegraph\\DTO\\InlineQueryResultVoice  This is a DTO for outgoing data, wraps info about the Voice result returned to the user   DefStudio\\Telegraph\\DTO\\InlineQueryResultDocument  This is a DTO for outgoing data, wraps info about the Document result returned to the user   DefStudio\\Telegraph\\DTO\\InlineQueryResultLocation  This is a DTO for outgoing data, wraps info about the Location result returned to the user",{"id":341,"path":342,"dir":343,"title":344,"description":345,"keywords":346,"body":350},"content:15.storage:1.entities_storage.md","/storage/entities_storage","storage","Telegraph Entities Storage","Telegraph offers a quick, multi driver, data storage solution to save and retrieve information about Bots, Chats and Users. A fine grained configuration is available in the storage section of Telegraph configuration file",[347,348,349],"Storages Available","Using different Storage drivers","Storing models","   Telegraph  offers a quick, multi driver, data storage solution to save and retrieve information about Bots, Chats and Users. A fine grained configuration is available in the   storage  section of Telegraph   configuration file  Storages Available  Telegraph implements, by default, contextual storage for Bots, Chats and User DTOs. Additionally a storage can be added to every class, it is only needed to implement the   \\DefStudio\\Telegraph\\Contracts\\Storable  contract and use the   \\DefStudio\\Telegraph\\Concerns\\HasStorage  trait:     class   MyCustomClass   implements   \\DefStudio\\Telegraph\\Contracts\\  Storable  {\n       use   \\DefStudio\\Telegraph\\Concerns\\HasStorage  ;\n   \n       public   function   storageKey  ()  :   string  |  int\n       {\n           return   \"MyCustomClass instance unique ID\"  ;\n       }\n   }\n  Bot Storage   TelegraphBots  data storage is available through its   ->storage()  method     /**   @var   \\DefStudio\\Telegraph\\Models\\TelegraphBot   $telegraphBot */\n   $telegraphBot  ->  storage  ()  ->  set  (  'last_chat'  ,   '1254824'  );\n   \n   $lastChatId   =   $telegraphBot  ->  storage  ()  ->  get  (  'last_chat'  );   // 1254824\n   \n   $telegraphBot  ->  forget  (  'last_chat'  )   //stored data is deleted\n  Chat Storage   TelegraphChats  data storage is available through its   ->storage()  method     /**   @var   \\DefStudio\\Telegraph\\Models\\TelegraphChat   $telegraphChat */\n   $telegraphChat  ->  storage  ()  ->  set  (  'last_message'  ,   'hello!'  );\n   \n   $lastMessage   =   $telegraphChat  ->  storage  ()  ->  get  (  'last_message'  );   // 1254824\n   \n   $lastMessage  ->  forget  (  'last_message'  )   //stored data is deleted\n  User DTO Storage   User DTO  data storage is available through its   ->storage()  method     /**   @var   \\App\\Models\\User   $user */\n   /**   @var   \\DefStudio\\Telegraph\\DTO\\User   $telegraphUser */\n   $telegraphUser  ->  storage  ()  ->  set  (  'laravel_user_id'  , $user  ->  id);\n   \n   $userId   =   $telegraphUser  ->  storage  ()  ->  get  (  'laravel_user_id'  );   // 99\n   \n   $userId  ->  forget  (  'laravel_user_id'  )   //stored data is deleted\n  Using different Storage drivers  Depending on the application needs, multiple drivers can be   configured  and used.  Default driver  A default storage driver can be set in   telegraph.storage.default  config and it will be used when   ->storage()  is invoked without arguments:     // /config/telegraph.php\n   \n   return   [\n       // ...\n   \n       'storage'   =>   [\n           'default'   =>   'file'\n       ]\n   ]\n     $telegraphUser  ->  storage  ()   // \\DefStudio\\Telegraph\\Storage\\FileStorageDriver\n  File Storage Driver  A file storage driver saves data in json files inside the disk/folder defined in Telegraph   configuration file     // /config/telegraph.php\n   \n   return   [\n       // ...\n   \n       'storage'   =>   [\n           'stores'   =>   [\n               'file'   =>   [\n                   'driver'   =>   \\DefStudio\\Telegraph\\Storage\\FileStorageDriver  ::class  ,\n                   'disk'   =>   'local'  ,\n                   'root'   =>   'telegraph'  ,\n               ]\n           ]       \n       ]\n   ]\n  with the above configuration this code will store the   name \nvalue in a   /[laravel local disk path]/telegraph/User/\u003Ctelegraph_user_id>.json  file     $telegraphUser  ->  storage  (  'file'  )  ->  put  (  'name'  ,   'Daniele'  );\n  Cache Storage Driver  A cache storage driver saves data using Laravel Cache system following Telegraph   configuration file     // /config/telegraph.php\n   \n   return   [\n       // ...\n   \n       'storage'   =>   [\n           'stores'   =>   [\n               'cache'   =>   [\n                   'driver'   =>   \\DefStudio\\Telegraph\\Storage\\CacheStorageDriver  ::class  ,\n                   'store'   =>   'redis'  ,\n                   'key_prefix'   =>   'tgph'  ,\n               ]\n           ]       \n       ]\n   ]\n  with the above configuration this code will store the   name \nvalue inside Laravel Redis Cache     $telegraphUser  ->  storage  (  'cache'  )  ->  put  (  'name'  ,   'Daniele'  );\n  Storing models  Telegraph can store model references as well: when a model is found inside data stored, it is internally converted in a class/id pair and the model is retrieved from DB when the value is fetched:     /**   @var   \\DefStudio\\Telegraph\\DTO\\User   $telegraphUser */\n   $systemUser   =   \\App\\Models\\User  ::  where  (  'username'  , $telegraphUser  ->  username  ());\n   \n   $telegraphUser  ->  storage  ()  ->  set  (  'system_data.user'  , $systemUser);\n   \n   $telegraphUser  ->  storage  ()  ->  get  (  'system_data.user'  )   // will return an Instance of \\App\\Models\\User\n  html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":352,"path":353,"dir":354,"title":355,"description":356,"keywords":357,"body":360},"content:16.testing:1.fake.md","/testing/fake","testing","Fake Telegram interaction","In order to avoid sending real messages to Telegram when testing, the Telegraph facade offers a ::fake() method to start registering sent messages internally instead of sending them to Telegram APIs.",[358,359],"Custom responses","Sent data dump","  In order to avoid sending real messages to Telegram when testing, the   Telegraph  facade offers a   ::fake()  method to start registering sent messages internally instead of sending them to Telegram APIs.     use   DefStudio\\Telegraph\\Facades\\Telegraph  ;\n   \n   Telegraph  ::  fake  ();\n   \n   Telegraph  ::  message  (  \"Hello devs!\"  )  ->  send  ();\n   \n   // the message won be actually sent to telegram, but can still be asserted\n   \n   Telegraph  ::  assertSent  (  'Hello devs!'  );\n  Custom responses  If needed for testing purpose, the   ::fake()  helper can accept an array of responses to be returned for each endpoint call:      Telegraph  ::  fake  ([\n      \\DefStudio\\Telegraph\\Telegraph  ::  ENDPOINT_MESSAGE   =>   [  'result'   =>   'oooook'  ],\n   ]);\n   \n   $response   =   Telegraph  ::  message  (  'foo'  )  ->  send  ();\n   \n   //$response will be a Response containing a json body: {\"result\":\"oooook\"}\n  Sent data dump  For debugging purpose, a dump of the sent data can be obtained with:     Telegraph  ::  fake  ();\n   \n   // Telegraph requests...\n   \n   Telegraph  ::  dumpSentData  ();\n  html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":362,"path":363,"dir":354,"title":364,"description":365,"keywords":366,"body":376},"content:16.testing:2.assertions.md","/testing/assertions","Fake messages assertions","The ::fake() facade helper enables a number of assertions for checking its activity",[367,368,369,370,371,372,373,374,375],"assertSent","assertNothingSent","assertSentData","assertSentFiles","assertSentEditMedia","assertStoredFile","assertRegisteredWebhook","assertRequestedWebhookDebugInfo","assertRepliedWebhook","  The   ::fake()  facade helper enables a number of assertions for checking its activity  assertSent  asserts that a message was sent to Telegram with the given text     //will check that the sent text is exactly 'hello'\n   Telegraph  ::  assertSent  (  'hello'  );\n   \n   //will check that the sent text contains 'hello'\n   Telegraph  ::  assertSent  (  'hello'  ,   false  );\n  assertNothingSent  asserts that no messages where sent to Telegram     Telegraph  ::  assertNothingSent  ();\n  assertSentData  asserts that the given data was sent to a Telegram API endpoint     Telegraph  ::  assertSentData  (\n       DefStudio\\Telegraph\\Telegraph  ::  ENDPOINT_MESSAGE  , \n       [  'text'   =>   'foo bar baz'  ]\n   );\n   \n   Telegraph  ::  assertSentData  (\n       DefStudio\\Telegraph\\Telegraph  ::  ENDPOINT_REPLACE_KEYBOARD  ,\n       [\n           'chat_id'   =>   -  546874  ,\n           'message_id'   =>   42  ,\n           'reply_markup'   =>   null  ,\n       ]\n   );\n  assertSentFiles  asserts that the given files were sent to a Telegram API endpoint     Telegraph  ::  assertSentFiles  (  \\DefStudio\\Telegraph\\Telegraph  ::  ENDPOINT_SEND_DOCUMENT  , [\n      'document'   =>   new   Attachment  (  Storage  ::  path  (  'test.txt'  ),   'test.txt'  ),\n   ]);\n  assertSentEditMedia  asserts that the given data was sent to a Telegram API endpoint     Telegraph  ::  assertSentEditMedia  (  'mediaType'  ,   Storage  ::  path  (  'photo.jpg'  ));\n  assertStoredFile  asserts that the given incoming file was stored     Telegraph  ::  assertStoredFile  ($fileId);\n  assertRegisteredWebhook  asserts that a webhook register request has been sent     Telegraph  ::  assertRegisteredWebhook  ();\n  assertRequestedWebhookDebugInfo  asserts that a webhook debug info request has been sent     Telegraph  ::  assertRequestedWebhookDebugInfo  ();\n  assertRepliedWebhook  asserts that a webhook reply has been sent with the given text     Telegraph  ::  assertRepliedWebhook  (  'task completed'  );\n  html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":378,"path":379,"dir":380,"title":381,"description":7,"keywords":382,"body":7},"content:17.community:1.releases.md","/community/releases","community","Releases",[],1704640023268]